###############################################################################
# Makes autonomous assembler construct our modules if necessary
#

###############################################################################
# OUR OWN EFFECTS
#

check_spaceport_shield_capacitor = {
	if = {
		limit = {
			ROOT = { NOT = { has_ship_flag = "ass_op_spaceport_modules" } }
			has_spaceport_module = spaceport_shield_capacitor
		}
		owner = {
			random_owned_planet = {
				limit = {
					alphamod_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = spaceport_shield_capacitor }
					can_build_spaceport_module = spaceport_shield_capacitor
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost"       value = 100 } }
					fleet = { set_variable = { which = "AssOperationCostEnergy" value = 150 } }
					fleet = { set_variable = { which = "AssConstructionTime"    value = 270 } }
					set_ship_flag = "ass_op_sm_spaceport_shield_capacitor"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing spaceport_shield_capacitor at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}

check_spaceport_shields_3 = {
	if = {
		limit = {
			ROOT = { NOT = { has_ship_flag = "ass_op_spaceport_modules" } }
			has_spaceport_module = spaceport_shields_3
		}
		owner = {
			random_owned_planet = {
				limit = {
					alphamod_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = spaceport_shields_3 }
					can_build_spaceport_module = spaceport_shields_3
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost"       value = 100 } }
					fleet = { set_variable = { which = "AssOperationCostEnergy" value = 150 } }
					fleet = { set_variable = { which = "AssConstructionTime"    value = 360 } }
					set_ship_flag = "ass_op_sm_spaceport_shields_3"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing spaceport_shields_3 at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}

check_spaceport_shields_2 = {
	if = {
		limit = {
			ROOT = { NOT = { has_ship_flag = "ass_op_spaceport_modules" } }
			has_spaceport_module = spaceport_shields_2
		}
		owner = {
			random_owned_planet = {
				limit = {
					alphamod_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = spaceport_shields_2 }
					can_build_spaceport_module = spaceport_shields_2
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost"       value = 100 } }
					fleet = { set_variable = { which = "AssOperationCostEnergy" value = 100 } }
					fleet = { set_variable = { which = "AssConstructionTime"    value = 180 } }
					set_ship_flag = "ass_op_sm_spaceport_shields_2"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing spaceport_shields_2 at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}

check_spaceport_shields_1 = {
	if = {
		limit = {
			ROOT = { NOT = { has_ship_flag = "ass_op_spaceport_modules" } }
			has_spaceport_module = spaceport_shields_1
		}
		owner = {
			random_owned_planet = {
				limit = {
					alphamod_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = spaceport_shields_1 }
					can_build_spaceport_module = spaceport_shields_1
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost"       value = 100 } }
					fleet = { set_variable = { which = "AssOperationCostEnergy" value = 50 } }
					fleet = { set_variable = { which = "AssConstructionTime"    value = 90 } }
					set_ship_flag = "ass_op_sm_spaceport_shields_1"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing spaceport_shields_1 at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}

check_spaceport_extraarmour_3 = {
	if = {
		limit = {
			ROOT = { NOT = { has_ship_flag = "ass_op_spaceport_modules" } }
			has_spaceport_module = spaceport_extraarmour_3
		}
		owner = {
			random_owned_planet = {
				limit = {
					alphamod_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = spaceport_extraarmour_3 }
					can_build_spaceport_module = spaceport_extraarmour_3
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost"       value = 250 } }
					fleet = { set_variable = { which = "AssConstructionTime"    value = 360 } }
					set_ship_flag = "ass_op_sm_spaceport_extraarmour_3"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing spaceport_extraarmour_3 at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}

check_spaceport_extraarmour_2 = {
	if = {
		limit = {
			ROOT = { NOT = { has_ship_flag = "ass_op_spaceport_modules" } }
			has_spaceport_module = spaceport_extraarmour_2
		}
		owner = {
			random_owned_planet = {
				limit = {
					alphamod_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = spaceport_extraarmour_2 }
					can_build_spaceport_module = spaceport_extraarmour_2
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost"       value = 200 } }
					fleet = { set_variable = { which = "AssConstructionTime"    value = 180 } }
					set_ship_flag = "ass_op_sm_spaceport_extraarmour_2"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing spaceport_extraarmour_2 at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}

check_spaceport_extraarmour_1 = {
	if = {
		limit = {
			ROOT = { NOT = { has_ship_flag = "ass_op_spaceport_modules" } }
			has_spaceport_module = spaceport_extraarmour_1
		}
		owner = {
			random_owned_planet = {
				limit = {
					alphamod_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = spaceport_extraarmour_1 }
					can_build_spaceport_module = spaceport_extraarmour_1
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost"       value = 150 } }
					fleet = { set_variable = { which = "AssConstructionTime"    value = 90 } }
					set_ship_flag = "ass_op_sm_spaceport_extraarmour_1"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing spaceport_extraarmour_1 at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}

check_early_warning_monitor = {
	if = {
		limit = {
			ROOT = { NOT = { has_ship_flag = "ass_op_spaceport_modules" } }
			has_spaceport_module = early_warning_monitor
		}
		owner = {
			random_owned_planet = {
				limit = {
					alphamod_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = early_warning_monitor }
					can_build_spaceport_module = early_warning_monitor
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost"       value = 150 } }
					fleet = { set_variable = { which = "AssOperationCostEnergy" value = 250 } }
					fleet = { set_variable = { which = "AssConstructionTime"    value = 180 } }
					set_ship_flag = "ass_op_sm_early_warning_monitor"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing early_warning_monitor at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}

check_transport_shuttles = {
	if = {
		limit = {
			ROOT = { NOT = { has_ship_flag = "ass_op_spaceport_modules" } }
			has_spaceport_module = transport_shuttles
		}
		owner = {
			random_owned_planet = {
				limit = {
					alphamod_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = transport_shuttles }
					can_build_spaceport_module = transport_shuttles
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost"       value = 200 } }
					fleet = { set_variable = { which = "AssOperationCostEnergy" value = 100 } }
					fleet = { set_variable = { which = "AssConstructionTime"    value = 360 } }
					set_ship_flag = "ass_op_sm_transport_shuttles"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing transport_shuttles at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}

check_station_bar = {
	if = {
		limit = {
			ROOT = { NOT = { has_ship_flag = "ass_op_spaceport_modules" } }
			has_spaceport_module = station_bar
		}
		owner = {
			random_owned_planet = {
				limit = {
					alphamod_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = station_bar }
					can_build_spaceport_module = station_bar
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost"       value = 50 } }
					fleet = { set_variable = { which = "AssOperationCostEnergy" value = 50 } }
					fleet = { set_variable = { which = "AssConstructionTime"    value = 180 } }
					set_ship_flag = "ass_op_sm_station_bar"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing station_bar at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}

check_orbital_hospital = {
	if = {
		limit = {
			ROOT = { NOT = { has_ship_flag = "ass_op_spaceport_modules" } }
			has_spaceport_module = orbital_hospital
		}
		owner = {
			random_owned_planet = {
				limit = {
					alphamod_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = orbital_hospital }
					can_build_spaceport_module = orbital_hospital
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost"       value = 200 } }
					fleet = { set_variable = { which = "AssOperationCostEnergy" value = 50 } }
					fleet = { set_variable = { which = "AssConstructionTime"    value = 180 } }
					set_ship_flag = "ass_op_sm_orbital_hospital"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing orbital_hospital at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}

check_food_replicators = {
	if = {
		limit = {
			ROOT = { NOT = { has_ship_flag = "ass_op_spaceport_modules" } }
			has_spaceport_module = food_replicators
		}
		owner = {
			random_owned_planet = {
				limit = {
					alphamod_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = food_replicators }
					can_build_spaceport_module = food_replicators
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost"       value = 100 } }
					fleet = { set_variable = { which = "AssOperationCostEnergy" value = 500 } }
					fleet = { set_variable = { which = "AssConstructionTime"    value = 180 } }
					set_ship_flag = "ass_op_sm_food_replicators"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing food_replicators at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}

check_trade_port = {
	if = {
		limit = {
			ROOT = { NOT = { has_ship_flag = "ass_op_spaceport_modules" } }
			has_spaceport_module = trade_port
		}
		owner = {
			random_owned_planet = {
				limit = {
					alphamod_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = trade_port }
					can_build_spaceport_module = trade_port
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost"       value = 150 } }
					fleet = { set_variable = { which = "AssOperationCostEnergy" value = 50 } }
					fleet = { set_variable = { which = "AssConstructionTime"    value = 180 } }
					set_ship_flag = "ass_op_sm_trade_port"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing trade_port at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}

check_data_core = {
	if = {
		limit = {
			ROOT = { NOT = { has_ship_flag = "ass_op_spaceport_modules" } }
			has_spaceport_module = data_core
		}
		owner = {
			random_owned_planet = {
				limit = {
					alphamod_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = data_core }
					can_build_spaceport_module = data_core
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost"       value = 50 } }
					fleet = { set_variable = { which = "AssOperationCostEnergy" value = 500 } }
					fleet = { set_variable = { which = "AssConstructionTime"    value = 360 } }
					set_ship_flag = "ass_op_sm_data_core"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing data_core at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}

check_commerce_guild = {
	if = {
		limit = {
			ROOT = { NOT = { has_ship_flag = "ass_op_spaceport_modules" } }
			has_spaceport_module = commerce_guild
		}
		owner = {
			random_owned_planet = {
				limit = {
					alphamod_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = commerce_guild }
					can_build_spaceport_module = commerce_guild
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost"       value = 250 } }
					fleet = { set_variable = { which = "AssOperationCostEnergy" value = 100 } }
					fleet = { set_variable = { which = "AssConstructionTime"    value = 180 } }
					set_ship_flag = "ass_op_sm_commerce_guild"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing commerce_guild at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}

check_industrial_replicator = {
	if = {
		limit = {
			ROOT = { NOT = { has_ship_flag = "ass_op_spaceport_modules" } }
			has_spaceport_module = industrial_replicator
		}
		owner = {
			random_owned_planet = {
				limit = {
					alphamod_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = industrial_replicator }
					can_build_spaceport_module = industrial_replicator
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost"       value = 200 } }
					fleet = { set_variable = { which = "AssOperationCostEnergy" value = 300 } }
					fleet = { set_variable = { which = "AssConstructionTime"    value = 360 } }
					set_ship_flag = "ass_op_sm_industrial_replicator"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing industrial_replicator at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}

check_tourist_promenade = {
	if = {
		limit = {
			ROOT = { NOT = { has_ship_flag = "ass_op_spaceport_modules" } }
			has_spaceport_module = tourist_promenade
		}
		owner = {
			random_owned_planet = {
				limit = {
					alphamod_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = tourist_promenade }
					can_build_spaceport_module = tourist_promenade
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost"       value = 100 } }
					fleet = { set_variable = { which = "AssOperationCostEnergy" value = 200 } }
					fleet = { set_variable = { which = "AssConstructionTime"    value = 180 } }
					set_ship_flag = "ass_op_sm_tourist_promenade"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing tourist_promenade at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}

check_comms_relay = {
	if = {
		limit = {
			ROOT = { NOT = { has_ship_flag = "ass_op_spaceport_modules" } }
			has_spaceport_module = comms_relay
		}
		owner = {
			random_owned_planet = {
				limit = {
					alphamod_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = comms_relay }
					can_build_spaceport_module = comms_relay
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost"       value = 50 } }
					fleet = { set_variable = { which = "AssOperationCostEnergy" value = 100 } }
					fleet = { set_variable = { which = "AssConstructionTime"    value = 180 } }
					set_ship_flag = "ass_op_sm_comms_relay"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing comms_relay at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}

check_fleet_coordinator = {
	if = {
		limit = {
			ROOT = { NOT = { has_ship_flag = "ass_op_spaceport_modules" } }
			has_spaceport_module = fleet_coordinator
		}
		owner = {
			random_owned_planet = {
				limit = {
					alphamod_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = fleet_coordinator }
					can_build_spaceport_module = fleet_coordinator
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost"       value = 200 } }
					fleet = { set_variable = { which = "AssOperationCostEnergy" value = 250 } }
					fleet = { set_variable = { which = "AssConstructionTime"    value = 360 } }
					set_ship_flag = "ass_op_sm_fleet_coordinator"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing fleet_coordinator at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}

check_station_marine_post = {
	if = {
		limit = {
			ROOT = { NOT = { has_ship_flag = "ass_op_spaceport_modules" } }
			has_spaceport_module = station_marine_post
		}
		owner = {
			random_owned_planet = {
				limit = {
					alphamod_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = station_marine_post }
					can_build_spaceport_module = station_marine_post
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost"       value = 100 } }
					fleet = { set_variable = { which = "AssOperationCostEnergy" value = 100 } }
					fleet = { set_variable = { which = "AssConstructionTime"    value = 180 } }
					set_ship_flag = "ass_op_sm_station_marine_post"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing station_marine_post at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}

check_alpha_pioneers_temple = {
	if = {
		limit = {
			ROOT = { NOT = { has_ship_flag = "ass_op_spaceport_modules" } }
			has_spaceport_module = alpha_pioneers_temple
		}
		owner = {
			random_owned_planet = {
				limit = {
					alphamod_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = alpha_pioneers_temple }
					can_build_spaceport_module = alpha_pioneers_temple
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost"       value = 100 } }
					fleet = { set_variable = { which = "AssOperationCostEnergy" value = 50 } }
					fleet = { set_variable = { which = "AssConstructionTime"    value = 180 } }
					set_ship_flag = "ass_op_sm_alpha_pioneers_temple"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing alpha_pioneers_temple at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}

check_alpha_modular_construction_bay = {
	if = {
		limit = {
			ROOT = { NOT = { has_ship_flag = "ass_op_spaceport_modules" } }
			has_spaceport_module = alpha_modular_construction_bay
		}
		owner = {
			random_owned_planet = {
				limit = {
					alphamod_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = alpha_modular_construction_bay }
					can_build_spaceport_module = alpha_modular_construction_bay
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost" value = 150 } }
					fleet = { set_variable = { which = "AssOperationCostEnergy" value = 75 } }
					fleet = { set_variable = { which = "AssConstructionTime" value = 360 } }
					set_ship_flag = "ass_op_sm_alpha_modular_construction_bay"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing alpha_modular_construction_bay at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}

check_alpha_orbital_labs = {
	if = {
		limit = {
			ROOT = { NOT = { has_ship_flag = "ass_op_spaceport_modules" } }
			has_spaceport_module = alpha_orbital_labs
		}
		owner = {
			random_owned_planet = {
				limit = {
					alphamod_valid_spaceport_module_planet = yes
					NOT = { has_spaceport_module = alpha_orbital_labs }
					can_build_spaceport_module = alpha_orbital_labs
				}
				ROOT = {
					fleet = { set_variable = { which = "AssOperationCost" value = 25 } }
					fleet = { set_variable = { which = "AssOperationCostEnergy" value = 50 } }
					fleet = { set_variable = { which = "AssConstructionTime" value = 180 } }
					set_ship_flag = "ass_op_sm_alpha_orbital_labs"
					set_ship_flag = "ass_op_spaceport_modules"
				}
				log = "[root.GetName]: Constructing alpha_orbital_labs at [this.GetName]."
				save_event_target_as = ass_target
			}
		}
	}
}

###############################################################################
# EFFECTS WE OVERRIDE FROM AUTONOMOUS ASSEMBLER

# This effect is invoked before vanilla modules are checked
am_spaceports_ass_stage1_sm_pre = {
	log = "checking alpha modules"
	check_alpha_modular_construction_bay = yes
	check_alpha_orbital_labs = yes
	check_alpha_pioneers_temple = yes
	check_commerce_guild = yes
	check_comms_relay = yes
	check_data_core = yes
	check_early_warning_monitor = yes
	check_fleet_coordinator = yes
	check_food_replicators = yes
	check_industrial_replicator = yes
	check_orbital_hospital = yes
	check_spaceport_extraarmour_1 = yes
	check_spaceport_extraarmour_2 = yes
	check_spaceport_extraarmour_3 = yes
	check_spaceport_shield_capacitor = yes
	check_spaceport_shields_1 = yes
	check_spaceport_shields_2 = yes
	check_spaceport_shields_3 = yes
	check_station_bar = yes
	check_station_marine_post = yes
	check_tourist_promenade = yes
	check_trade_port = yes
	check_transport_shuttles = yes
}

# This effect is invoked after vanilla modules are checked
am_spaceports_ass_stage1_sm_post = {

}

# This effect is invoked after the mission is completed OR aborted,
# just to clean up unused ship/fleet/etc flags and variables
# (decluttering the debugtooltip mostly)
am_spaceports_ass_stage4_sm_remove_data = {
	remove_ship_flag = "ass_op_sm_alpha_modular_construction_bay"
	remove_ship_flag = "ass_op_sm_alpha_orbital_labs"
	remove_ship_flag = "ass_op_sm_alpha_pioneers_temple"
	remove_ship_flag = "ass_op_sm_station_marine_post"
	remove_ship_flag = "ass_op_sm_fleet_coordinator"
	remove_ship_flag = "ass_op_sm_comms_relay"
	remove_ship_flag = "ass_op_sm_tourist_promenade"
	remove_ship_flag = "ass_op_sm_industrial_replicator"
	remove_ship_flag = "ass_op_sm_commerce_guild"
	remove_ship_flag = "ass_op_sm_data_core"
	remove_ship_flag = "ass_op_sm_trade_port"
	remove_ship_flag = "ass_op_sm_food_replicators"
	remove_ship_flag = "ass_op_sm_orbital_hospital"
	remove_ship_flag = "ass_op_sm_station_bar"
	remove_ship_flag = "ass_op_sm_transport_shuttles"
	remove_ship_flag = "ass_op_sm_early_warning_monitor"
	remove_ship_flag = "ass_op_sm_spaceport_extraarmour_1"
	remove_ship_flag = "ass_op_sm_spaceport_extraarmour_2"
	remove_ship_flag = "ass_op_sm_spaceport_extraarmour_3"
	remove_ship_flag = "ass_op_sm_spaceport_shields_1"
	remove_ship_flag = "ass_op_sm_spaceport_shields_2"
	remove_ship_flag = "ass_op_sm_spaceport_shields_3"
	remove_ship_flag = "ass_op_sm_spaceport_shield_capacitor"
}

# This effect is invoked after the vanilla construction effects,
# which means that this is where you will need to actually pop the
# module into place.
am_spaceports_ass_stage4_sm_complete = {
	switch = {
		trigger = has_ship_flag
		ass_op_sm_alpha_modular_construction_bay = { ass_op_sm_alpha_modular_construction_bay = yes }
		ass_op_sm_alpha_orbital_labs = { ass_op_sm_alpha_orbital_labs = yes }
		ass_op_sm_alpha_pioneers_temple = { ass_op_sm_alpha_pioneers_temple = yes }
		ass_op_sm_station_marine_post = { ass_op_sm_station_marine_post = yes }
		ass_op_sm_fleet_coordinator = { ass_op_sm_fleet_coordinator = yes }
		ass_op_sm_comms_relay = { ass_op_sm_comms_relay = yes }
		ass_op_sm_tourist_promenade = { ass_op_sm_tourist_promenade = yes }
		ass_op_sm_industrial_replicator = { ass_op_sm_industrial_replicator = yes }
		ass_op_sm_commerce_guild = { ass_op_sm_commerce_guild = yes }
		ass_op_sm_data_core = { ass_op_sm_data_core = yes }
		ass_op_sm_trade_port = { ass_op_sm_trade_port = yes }
		ass_op_sm_food_replicators = { ass_op_sm_food_replicators = yes }
		ass_op_sm_orbital_hospital = { ass_op_sm_orbital_hospital = yes }
		ass_op_sm_station_bar = { ass_op_sm_station_bar = yes }
		ass_op_sm_transport_shuttles = { ass_op_sm_transport_shuttles = yes }
		ass_op_sm_early_warning_monitor = { ass_op_sm_early_warning_monitor = yes }
		ass_op_sm_spaceport_extraarmour_1 = { ass_op_sm_spaceport_extraarmour_1 = yes }
		ass_op_sm_spaceport_extraarmour_2 = { ass_op_sm_spaceport_extraarmour_2 = yes }
		ass_op_sm_spaceport_extraarmour_3 = { ass_op_sm_spaceport_extraarmour_3 = yes }
		ass_op_sm_spaceport_shields_1 = { ass_op_sm_spaceport_shields_1 = yes }
		ass_op_sm_spaceport_shields_2 = { ass_op_sm_spaceport_shields_2 = yes }
		ass_op_sm_spaceport_shields_3 = { ass_op_sm_spaceport_shields_3 = yes }
		ass_op_sm_spaceport_shield_capacitor = { ass_op_sm_spaceport_shield_capacitor = yes }
	}
}
