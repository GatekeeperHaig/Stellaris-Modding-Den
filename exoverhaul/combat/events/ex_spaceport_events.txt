namespace = ex_spaceport_events

event = { #this event fires on game start 
	id = ex_spaceport_events.0
	hide_window = yes
	is_triggered_only = yes

	immediate = { 
		every_country = { 
			limit = {
				OR = {
					is_country_type = default
					is_country_type = fallen_empire
					is_country_type = awakened_fallen_empire
				}
			}	
			every_owned_planet = { 				
				limit = { has_spaceport = yes }				
				planet_event = { id = ex_spaceport_events.10 }														
			}	
		}
	}	
}

ship_event = { #this event fires the moment a spaceport is built
	id = ex_spaceport_events.1
	hide_window = yes
	is_triggered_only = yes

	immediate = { 
		from = { 
			remove_spaceport_flags_and_modifiers = yes
			planet_event = { id = ex_spaceport_events.10 }
		}
	} 		
}

country_event = { #this event fires whenever a new technology is researched
	id = ex_spaceport_events.2
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		every_owned_planet = {
			limit = { has_spaceport = yes }	
			update_spaceport_weapon_modifiers = yes		
		}
	}
}	

country_event = { #this event is triggered when a spaceport is destroyed (not dismantled).
	id = ex_spaceport_events.3
	hide_window = yes
	is_triggered_only = yes
	trigger = {	fromfrom = { is_ship_size = orbital_station } }			
    immediate = { 
		fromfrom = { 
			orbit = { 
				planet = { 
					remove_planet_flag = spaceport_automation_economic_specialized	
					remove_planet_flag = spaceport_automation_economic_mixed
					remove_planet_flag = spaceport_automation_stardock_specialized
					remove_planet_flag = spaceport_automation_defensive_specialized
					remove_planet_flag = spaceport_automation_defensive_mixed	
					remove_planet_flag = spaceport_automation_disable_local						
					remove_spaceport_flags_and_modifiers = yes
				}
			}
		}
	}
}
				
country_event = { #this event is triggered when a spaceport is dismantled.
	id = ex_spaceport_events.4
	hide_window = yes
	is_triggered_only = yes
	trigger = { from = { is_ship_size = orbital_station } }	
	immediate = { 
		from = { 
			orbit = { 
				planet = { 		
					if = { 
						limit = { NOT = { has_planet_flag = rebuild_process } }
						remove_planet_flag = spaceport_automation_economic_specialized	
						remove_planet_flag = spaceport_automation_economic_mixed
						remove_planet_flag = spaceport_automation_stardock_specialized
						remove_planet_flag = spaceport_automation_defensive_specialized
						remove_planet_flag = spaceport_automation_defensive_mixed	
						remove_planet_flag = spaceport_automation_disable_local			
						remove_spaceport_flags_and_modifiers = yes
					}	
				}
			}
		}
	}
}	

event = { #this event fires on a monthly pulse
	id = ex_spaceport_events.6
	hide_window = yes
	is_triggered_only = yes

	immediate = { 
		every_country = { 
			limit = {
				OR = {
					is_country_type = default
					is_country_type = fallen_empire
					is_country_type = awakened_fallen_empire
				}
			}	
			every_owned_planet = { 				
				if = { limit = { has_spaceport = no	NOT = { has_planet_flag = spaceport_flags_removed } has_spaceport_level_flag = yes } remove_spaceport_flags_and_modifiers = yes	}
				if = { limit = { has_spaceport = yes } update_spaceport_weapon_modifiers = yes } 
			}
		}
	}
}				

planet_event = { # this event runs on every tick (day), checking and adding/removing planet spaceport level flags/modifiers as needed. 
	id = ex_spaceport_events.10
	hide_window = yes
	#is_triggered_only = yes
	
	trigger = { 	
		has_owner = yes
		has_spaceport = yes				
		has_free_spaceport_module_slot = yes	
		OR = {
			has_planet_flag = no_slot_available
			switch = {
				trigger = is_spaceport_module_slot_free
				9 = { OR = { NOT = { check_variable = { which = "spaceport_level" value > 8 } } NOT = { has_planet_flag = slot_9_free } } }
				8 = { OR = { NOT = { check_variable = { which = "spaceport_level" value > 7 } } NOT = { has_planet_flag = slot_8_free } } }
				7 = { OR = { NOT = { check_variable = { which = "spaceport_level" value > 6 } } NOT = { has_planet_flag = slot_7_free } } }
				6 = { OR = { NOT = { check_variable = { which = "spaceport_level" value > 5 } } NOT = { has_planet_flag = slot_6_free } } }
				5 = { OR = { NOT = { check_variable = { which = "spaceport_level" value > 4 } } NOT = { has_planet_flag = slot_5_free } } }
				4 = { OR = { NOT = { check_variable = { which = "spaceport_level" value > 3 } } NOT = { has_planet_flag = slot_4_free } } }
				3 = { OR = { NOT = { check_variable = { which = "spaceport_level" value > 2 } } NOT = { has_planet_flag = slot_3_free } } }
				2 = { OR = { NOT = { check_variable = { which = "spaceport_level" value > 1 } } NOT = { has_planet_flag = slot_2_free } } }
				1 = { OR = { NOT = { check_variable = { which = "spaceport_level" value > 0 } } NOT = { has_planet_flag = slot_1_free } } }
			}
		}	
	}
	
	immediate = {
		set_timed_planet_flag = { flag = flag_delay_0 days = 1 } #this delays the following event
		set_timed_planet_flag = { flag = flag_delay_1 days = 2 } #this delays the second following event		
		if = { limit = { has_planet_flag = spaceport_flags_removed } remove_planet_flag = spaceport_flags_removed }
		if = { limit = { has_planet_flag = no_slot_available } remove_planet_flag = no_slot_available }
		check_module_slots = yes
		switch = {
			trigger = is_spaceport_module_slot_free
			9 = { if = { limit = {  NOT = { check_variable = { which = "spaceport_level" value > 8 } } } set_variable = { which = "spaceport_level" value = 9 } update_spaceport_level = yes update_spaceport_modifiers = yes } if = { limit = { NOT = { has_planet_flag = slot_9_free } } set_planet_flag = slot_9_free } }					
			8 = { if = { limit = {  NOT = { check_variable = { which = "spaceport_level" value > 7 } } } set_variable = { which = "spaceport_level" value = 8 } update_spaceport_level = yes update_spaceport_modifiers = yes }	if = { limit = { NOT = { has_planet_flag = slot_8_free } } set_planet_flag = slot_8_free } }	
			7 = { if = { limit = {  NOT = { check_variable = { which = "spaceport_level" value > 6 } } } set_variable = { which = "spaceport_level" value = 7 } update_spaceport_level = yes update_spaceport_modifiers = yes }	if = { limit = { NOT = { has_planet_flag = slot_7_free } } set_planet_flag = slot_7_free } }	
			6 = { if = { limit = {  NOT = { check_variable = { which = "spaceport_level" value > 5 } } } set_variable = { which = "spaceport_level" value = 6 } update_spaceport_level = yes update_spaceport_modifiers = yes }	if = { limit = { NOT = { has_planet_flag = slot_6_free } } set_planet_flag = slot_6_free } }
			5 = { if = { limit = {  NOT = { check_variable = { which = "spaceport_level" value > 4 } } } set_variable = { which = "spaceport_level" value = 5 } update_spaceport_level = yes update_spaceport_modifiers = yes }	if = { limit = { NOT = { has_planet_flag = slot_5_free } } set_planet_flag = slot_5_free } }	
			4 = { if = { limit = {  NOT = { check_variable = { which = "spaceport_level" value > 3 } } } set_variable = { which = "spaceport_level" value = 4 } update_spaceport_level = yes update_spaceport_modifiers = yes }	if = { limit = { NOT = { has_planet_flag = slot_4_free } } set_planet_flag = slot_4_free } }	
			3 = { if = { limit = {  NOT = { check_variable = { which = "spaceport_level" value > 2 } } } set_variable = { which = "spaceport_level" value = 3 } update_spaceport_level = yes update_spaceport_modifiers = yes }	if = { limit = { NOT = { has_planet_flag = slot_3_free } } set_planet_flag = slot_3_free } }	
			2 = { if = { limit = {  NOT = { check_variable = { which = "spaceport_level" value > 1 } } } set_variable = { which = "spaceport_level" value = 2 } update_spaceport_level = yes update_spaceport_modifiers = yes }	if = { limit = { NOT = { has_planet_flag = slot_2_free } } set_planet_flag = slot_2_free } }	
			1 = { if = { limit = {  NOT = { check_variable = { which = "spaceport_level" value > 0 } } } set_variable = { which = "spaceport_level" value = 1 } update_spaceport_level = yes update_spaceport_modifiers = yes }	if = { limit = { NOT = { has_planet_flag = slot_1_free } } set_planet_flag = slot_1_free } }
		}			
	}
}	

planet_event = { # this event runs on every tick (day), checking whether automation is enabled, if it is and there is an empty slot flag + no "module under construction" module on the planet, it fires the automation event.
	id = ex_spaceport_events.11
	hide_window = yes
	#is_triggered_only = yes

	trigger = {		
		NOR = { 
			has_planet_flag = flag_delay_0
			has_planet_flag = no_slot_available
		}
		has_spaceport = yes		
		is_automation_enabled = yes		
		OR = {
			AND = {
				has_planet_flag = slot_1_free
				NOT = { has_spaceport_module = slot_unavailable_1 }
			}	
			AND = {
				has_planet_flag = slot_2_free
				NOT = { has_spaceport_module = slot_unavailable_2 }
			}				
			AND = {
				has_planet_flag = slot_3_free
				NOT = { has_spaceport_module = slot_unavailable_3 }
			}				
			AND = {
				has_planet_flag = slot_4_free
				NOT = { has_spaceport_module = slot_unavailable_4 }
			}				
			AND = {
				has_planet_flag = slot_5_free
				NOT = { has_spaceport_module = slot_unavailable_5 }
			}				
			AND = {
				has_planet_flag = slot_6_free
				NOT = { has_spaceport_module = slot_unavailable_6 }
			}				
			AND = {
				has_planet_flag = slot_7_free
				NOT = { has_spaceport_module = slot_unavailable_7 }
			}				
			AND = {
				has_planet_flag = slot_8_free
				NOT = { has_spaceport_module = slot_unavailable_8 }
			}				
			AND = {
				has_planet_flag = slot_9_free
				NOT = { has_spaceport_module = slot_unavailable_9 }
			}							
		}								
	}			
	immediate = { 
		set_timed_planet_flag = { flag = flag_delay_2 days = 1 } #this is meant to gate the following event		
		if = { 
			limit = { has_planet_flag = slot_1_free NOT = { has_spaceport_module = slot_unavailable_1 } }
			set_spaceport_module = { slot = 1 module = "slot_unavailable_1" }
			else = { 
				if = {
					limit = { has_planet_flag = slot_2_free NOT = { has_spaceport_module = slot_unavailable_2 } }
					set_spaceport_module = { slot = 2 module = "slot_unavailable_2" }
					else = {
						if = {
							limit = { has_planet_flag = slot_3_free NOT = { has_spaceport_module = slot_unavailable_3 } }
							set_spaceport_module = { slot = 3 module = "slot_unavailable_3" }
							else = {
								if = {
									limit = { has_planet_flag = slot_4_free NOT = { has_spaceport_module = slot_unavailable_4 } }
									set_spaceport_module = { slot = 4 module = "slot_unavailable_4" }
									else = {							
										if = {
											limit = { has_planet_flag = slot_5_free NOT = { has_spaceport_module = slot_unavailable_5 } }
											set_spaceport_module = { slot = 5 module = "slot_unavailable_5" }
											else = {
												if = {
													limit = { has_planet_flag = slot_6_free NOT = { has_spaceport_module = slot_unavailable_6 } }
													set_spaceport_module = { slot = 6 module = "slot_unavailable_6" }
													else = {
														if = {
															limit = { has_planet_flag = slot_7_free NOT = { has_spaceport_module = slot_unavailable_7 } }
															set_spaceport_module = { slot = 7 module = "slot_unavailable_7" }
															else = {													
																if = {
																	limit = { has_planet_flag = slot_8_free NOT = { has_spaceport_module = slot_unavailable_8 } }
																	set_spaceport_module = { slot = 8 module = "slot_unavailable_8" }
																	else = {														
																		if = {
																			limit = { has_planet_flag = slot_9_free NOT = { has_spaceport_module = slot_unavailable_9 } }
																			set_spaceport_module = { slot = 9 module = "slot_unavailable_9" }
																			else = { set_planet_flag = no_slot_available											
}}}}}}}}}}}}}}}}}}}}


planet_event = { # this event runs on every tick (day), checking whether automation is enabled, if it is and there is an empty slot flag + no "module under construction" module on the planet, it fires the automation event.
	id = ex_spaceport_events.12
	hide_window = yes
	#is_triggered_only = yes

	trigger = {		
		NOR = { 
			has_planet_flag = flag_delay_1
			has_planet_flag = flag_delay_2
		}		
		has_spaceport = yes					
		is_automation_enabled = yes		
		NOT = { has_spaceport_module = module_under_construction }		
		OR = {
			has_spaceport_module = slot_unavailable_9
			has_spaceport_module = slot_unavailable_8
			has_spaceport_module = slot_unavailable_7
			has_spaceport_module = slot_unavailable_6
			has_spaceport_module = slot_unavailable_5
			has_spaceport_module = slot_unavailable_4
			has_spaceport_module = slot_unavailable_3
			has_spaceport_module = slot_unavailable_2
			has_spaceport_module = slot_unavailable_1
		}								
	}			
	immediate = { planet_event = { id = ex_spaceport_events.100 days = 1 } }
}
	
#the events below are spaceport development automation events.

planet_event = { #this event checks the spaceport type, compares to the edict and replaces the spaceport itself as needed. 
	id = ex_spaceport_events.100
	hide_window = yes
	is_triggered_only = yes

	trigger = {	
		has_spaceport = yes
		has_spaceport_construction = no
		if = {
			limit = { owner = { has_policy_flag = minimum_250_for_module_auto_construction } }
			owner = { minerals > 500 }
		}	
		if = {
			limit = { owner = { has_policy_flag = minimum_500_for_module_auto_construction } }
			owner = { minerals > 750 }
		}			
		if = {
			limit = { owner = { has_policy_flag = minimum_500_for_module_auto_construction } }
			owner = { minerals > 1000 }
		}		
		if = {
			limit = { owner = { has_policy_flag = minimum_500_for_module_auto_construction } }
			owner = { minerals > 1500 }
		}
	}	
	
	immediate = {
		if = { 
			limit = { 
				sector_controlled = yes
				owner = { has_policy_flag = sector_automation }
			}
			if = { #### economic spaceports
				limit = {
					owner = {
						OR = {
							has_policy_flag = sector_specialized_economic_module_construction
							has_policy_flag = sector_mixed_economic_emphasis_module_construction
						}
					}
				}	
				if = {
					limit = { 
						has_economic_spaceport = yes					
						owner = { has_policy_flag = sector_specialized_economic_module_construction }
					}				
					if = { 
						limit = { owner = { OR = { has_policy_flag = scrap_modules_all has_policy_flag = scrap_modules_sector } } }
						scrap_stardock_modules = yes
						scrap_defensive_modules = yes
					}	
					flag_modules = yes
					check_module_flags = yes					
					construct_module = yes					
				}	
				if = {
					limit = { 
						has_economic_spaceport = yes					
						owner = { has_policy_flag = sector_mixed_economic_emphasis_module_construction }
					}				
					if = { 
						limit = { owner = { OR = { has_policy_flag = scrap_modules_all has_policy_flag = scrap_modules_sector } } }					
						scrap_stardock_modules = yes					
					}	
					flag_modules = yes
					check_module_flags = yes					
					construct_module = yes							
				}
				if = {
					limit = { 
						has_economic_spaceport = no					
						owner = { has_policy_flag = sector_specialized_economic_module_construction }
					}
					clear_base_weapon_flags = yes
					check_base_weapon = yes
					if = { 
						limit = { owner = { OR = { has_policy_flag = scrap_modules_all has_policy_flag = scrap_modules_sector } } }					
						scrap_stardock_modules = yes
						scrap_defensive_modules = yes
					}	
					set_planet_flag = rebuild_process
					spaceport = { dismantle = yes }
					rebuild_spaceport_economic = yes					
					rebuild_economic_modules = yes					
					if = { 
						limit = { owner = { has_policy_flag = only_build_new } }
						rebuild_defensive_modules = yes
						rebuild_stardock_modules = yes
					}	
					rebuild_cleanup = yes					
					construct_module = yes						
				}	
				if = {
					limit = { 
						has_economic_spaceport = no					
						owner = { has_policy_flag = sector_mixed_economic_emphasis_module_construction }
					}
					clear_base_weapon_flags = yes
					check_base_weapon = yes
					scrap_stardock_modules = yes	
					set_planet_flag = rebuild_process					
					spaceport = { dismantle = yes }
					rebuild_spaceport_economic = yes
					rebuild_economic_modules = yes
					rebuild_defensive_modules = yes
					if = { 
						limit = { owner = { has_policy_flag = only_build_new } }						
						rebuild_stardock_modules = yes
					}					
					rebuild_cleanup = yes					
					construct_module = yes			
				}					
			}
			if = { #### defensive spaceports
				limit = {
					owner = {
						OR = {
							has_policy_flag = sector_specialized_defensive_module_construction
							has_policy_flag = sector_mixed_defensive_emphasis_module_construction
						}
					}
				}	
				if = {
					limit = { 
						has_defensive_spaceport = yes					
						owner = { has_policy_flag = sector_specialized_defensive_module_construction }
					}
					if = { 
						limit = { owner = { OR = { has_policy_flag = scrap_modules_all has_policy_flag = scrap_modules_sector } } }	
						scrap_stardock_modules = yes
						scrap_economic_modules = yes
					}	
					flag_modules = yes
					check_module_flags = yes					
					construct_module = yes									
				}	
				if = {
					limit = { 
						has_defensive_spaceport = yes					
						owner = { has_policy_flag = sector_mixed_defensive_emphasis_module_construction }
					}	
					if = { 
						limit = { owner = { OR = { has_policy_flag = scrap_modules_all has_policy_flag = scrap_modules_sector } } }						
						scrap_stardock_modules = yes					
					}	
					flag_modules = yes
					check_module_flags = yes					
					construct_module = yes							
				}
				if = {
					limit = { 
						has_defensive_spaceport = no					
						owner = { has_policy_flag = sector_specialized_defensive_module_construction }
					}
					clear_base_weapon_flags = yes
					check_base_weapon = yes
					if = { 
						limit = { owner = { OR = { has_policy_flag = scrap_modules_all has_policy_flag = scrap_modules_sector } } }						
						scrap_stardock_modules = yes
						scrap_economic_modules = yes
					}	
					set_planet_flag = rebuild_process
					spaceport = { dismantle = yes }
					rebuild_spaceport_defensive = yes
					rebuild_defensive_modules = yes
					if = { 
						limit = { owner = { has_policy_flag = only_build_new } }				
						rebuild_stardock_modules = yes
						rebuild_economic_modules = yes
					}
					rebuild_cleanup = yes					
					construct_module = yes	
				}	
				if = {
					limit = { 
						has_defensive_spaceport = no					
						owner = { has_policy_flag = sector_mixed_defensive_emphasis_module_construction }
					}
					clear_base_weapon_flags = yes
					check_base_weapon = yes
					if = { 
						limit = { owner = { OR = { has_policy_flag = scrap_modules_all has_policy_flag = scrap_modules_sector } } }						
						scrap_stardock_modules = yes
					}	
					set_planet_flag = rebuild_process					
					spaceport = { dismantle = yes }
					rebuild_spaceport_defensive = yes
					rebuild_economic_modules = yes
					rebuild_defensive_modules = yes
					if = { 
						limit = { owner = { has_policy_flag = only_build_new } }		
						rebuild_stardock_modules = yes
					}	
					rebuild_cleanup = yes					
					construct_module = yes	
				}					
			}			
		}	
		if = { 
			limit = { 
				sector_controlled = no
				owner = { 
					OR = {
						has_policy_flag = core_automation
						has_policy_flag = core_edicts
					}
				}	
			}
			if = { #### economic spaceports
				limit = {
					OR = {
						owner = {
							OR = {
								has_policy_flag = core_specialized_economic_module_construction
								has_policy_flag = core_mixed_economic_emphasis_module_construction
							}
						}	
						OR = {
							has_planet_flag = spaceport_automation_economic_specialized	
							has_planet_flag = spaceport_automation_economic_mixed
						}	
					}
				}	
				if = {
					limit = { 
						has_economic_spaceport = yes					
						OR = {
							owner = { has_policy_flag = core_specialized_economic_module_construction }
							has_planet_flag = spaceport_automation_economic_specialized
						}	
					}			
					if = { 
						limit = { owner = { has_policy_flag = scrap_modules_all } }							
						scrap_stardock_modules = yes
						scrap_defensive_modules = yes
					}	
					flag_modules = yes
					check_module_flags = yes					
					construct_module = yes								
				}	
				if = {
					limit = { 
						has_economic_spaceport = yes					
						OR = {
							owner = { has_policy_flag = core_mixed_economic_emphasis_module_construction }
							has_planet_flag = spaceport_automation_economic_mixed
						}	
					}		
					if = { 
						limit = { owner = { has_policy_flag = scrap_modules_all } }												
						scrap_stardock_modules = yes					
					}	
					flag_modules = yes
					check_module_flags = yes					
					construct_module = yes										
				}
				if = {
					limit = { 
						has_economic_spaceport = no					
						OR = {
							owner = { has_policy_flag = core_specialized_economic_module_construction }
							has_planet_flag = spaceport_automation_economic_specialized
						}	
					}
					clear_base_weapon_flags = yes
					check_base_weapon = yes
					if = { 
						limit = { owner = { has_policy_flag = scrap_modules_all } }												
						scrap_stardock_modules = yes
						scrap_defensive_modules = yes
					}	
					set_planet_flag = rebuild_process
					spaceport = { dismantle = yes }
					rebuild_spaceport_economic = yes
					rebuild_economic_modules = yes
					if = { 
						limit = { owner = { has_policy_flag = only_build_new } }							
						rebuild_stardock_modules = yes
					}	
					rebuild_cleanup = yes					
					construct_module = yes	
				}	
				if = {
					limit = { 
						has_economic_spaceport = no					
						OR = {
							owner = { has_policy_flag = core_mixed_economic_emphasis_module_construction }
							has_planet_flag = spaceport_automation_economic_mixed
						}	
					}
					clear_base_weapon_flags = yes
					check_base_weapon = yes
					if = { 
						limit = { owner = { has_policy_flag = scrap_modules_all } }						
						scrap_stardock_modules = yes	
					}	
					set_planet_flag = rebuild_process
					spaceport = { dismantle = yes }
					rebuild_spaceport_economic = yes
					rebuild_economic_modules = yes
					rebuild_defensive_modules = yes
					if = { 
						limit = { owner = { has_policy_flag = only_build_new } }							
						rebuild_stardock_modules = yes
					}						
					rebuild_cleanup = yes					
					construct_module = yes	
				}					
			}
			if = { #### defensive spaceports
				limit = {
					OR = {
						owner = {
							OR = {
								has_policy_flag = core_specialized_defensive_module_construction
								has_policy_flag = core_mixed_defensive_emphasis_module_construction
							}
						}	
						OR = {
							has_planet_flag = spaceport_automation_defensive_specialized	
							has_planet_flag = spaceport_automation_defensive_mixed
						}	
					}
				}	
				if = {
					limit = { 
						has_defensive_spaceport = yes					
						OR = {
							owner = { has_policy_flag = core_specialized_defensive_module_construction }
							has_planet_flag = spaceport_automation_defensive_specialized
						}	
					}		
					if = { 
						limit = { owner = { has_policy_flag = scrap_modules_all } }						
						scrap_stardock_modules = yes
						scrap_economic_modules = yes
					}	
					flag_modules = yes
					check_module_flags = yes					
					construct_module = yes								
				}	
				if = {
					limit = { 
						has_defensive_spaceport = yes					
						OR = {
							owner = { has_policy_flag = core_mixed_defensive_emphasis_module_construction }
							has_planet_flag = spaceport_automation_defensive_mixed
						}	
					}			
					if = { 
						limit = { owner = { has_policy_flag = scrap_modules_all } }						
						scrap_stardock_modules = yes					
					}	
					flag_modules = yes
					check_module_flags = yes					
					construct_module = yes								
				}
				if = {
					limit = { 
						has_defensive_spaceport = no					
						OR = {
							owner = { has_policy_flag = core_specialized_defensive_module_construction }
							has_planet_flag = spaceport_automation_defensive_specialized
						}	
					}
					clear_base_weapon_flags = yes
					check_base_weapon = yes
					if = { 
						limit = { owner = { has_policy_flag = scrap_modules_all } }						
						scrap_stardock_modules = yes
						scrap_economic_modules = yes
					}	
					set_planet_flag = rebuild_process
					spaceport = { dismantle = yes }
					rebuild_spaceport_defensive = yes
					rebuild_defensive_modules = yes	
					if = { 
						limit = { owner = { has_policy_flag = only_build_new } }	
						rebuild_stardock_modules = yes
					}	
					rebuild_cleanup = yes					
					construct_module = yes	
				}	
				if = {
					limit = { 
						has_defensive_spaceport = no					
						OR = {
							owner = { has_policy_flag = core_mixed_defensive_emphasis_module_construction }
							has_planet_flag = spaceport_automation_defensive_mixed
						}	
					}
					clear_base_weapon_flags = yes
					check_base_weapon = yes
					if = { 
						limit = { owner = { has_policy_flag = scrap_modules_all } }								
						scrap_stardock_modules = yes
					}	
					set_planet_flag = rebuild_process
					spaceport = { dismantle = yes }
					rebuild_spaceport_defensive = yes
					rebuild_economic_modules = yes
					rebuild_defensive_modules = yes	
					if = { 
						limit = { owner = { has_policy_flag = only_build_new } }	
						rebuild_stardock_modules = yes
					}						
					rebuild_cleanup = yes					
					construct_module = yes	
				}					
			}								
			if = { #### stardock spaceports
				limit = {
					OR = {
						owner = {
							has_policy_flag = core_specialized_stardock_module_construction
						}	
						has_planet_flag = spaceport_automation_stardock_specialized	
					}
				}	
				if = {
					limit = { 
						has_stardock_spaceport = yes					
					}	
					if = { 
						limit = { owner = { has_policy_flag = scrap_modules_all } }						
						scrap_defensive_modules = yes
						scrap_economic_modules = yes
					}	
					flag_modules = yes
					check_module_flags = yes					
					construct_module = yes									
				}	
				if = {
					limit = { 
						has_stardock_spaceport = no					
					}
					clear_base_weapon_flags = yes
					check_base_weapon = yes
					if = { 
						limit = { owner = { has_policy_flag = scrap_modules_all } }						
						scrap_defensive_modules = yes
						scrap_economic_modules = yes
					}	
					set_planet_flag = rebuild_process
					spaceport = { dismantle = yes }	
					rebuild_spaceport_stardock = yes
					rebuild_stardock_modules = yes					
					if = { 
						limit = { owner = { has_policy_flag = only_build_new } }					
						rebuild_defensive_modules = yes
						rebuild_economic_modules = yes
					}						
					rebuild_cleanup = yes					
					construct_module = yes						
				}	
			}					
		}				
	}
}

planet_event = { #this event builds spaceport modules if some form of automation is active on the planet.
	id = ex_spaceport_events.101
	hide_window = yes
	is_triggered_only = yes
	
	immediate = { 
		if = {
			limit = {
				AND = {
					owner = {
						OR = {
							AND = {
								has_policy_flag = minimum_250_for_module_auto_construction
								minerals > 500
							}	
							AND = {
								has_policy_flag = minimum_500_for_module_auto_construction
								minerals > 750
							}			
							AND = {
								has_policy_flag = minimum_500_for_module_auto_construction
								minerals > 1000
							}		
							AND = {
								has_policy_flag = minimum_500_for_module_auto_construction
								minerals > 1500
							}	
						}							
					}
					OR = {
						AND = {
							sector_controlled = yes
							OR = {
								AND = {
									owner = { has_policy_flag = sector_specialized_economic_module_construction }
									can_build_economic_module = yes
								}								
								AND = {
									owner = { has_policy_flag = sector_specialized_defensive_module_construction }
									can_build_defensive_module = yes
								}																
								AND = {
									owner = { 
										OR = {
											has_policy_flag = sector_mixed_economic_emphasis_module_construction
											has_policy_flag = sector_mixed_defensive_emphasis_module_construction
										}
									}	
									can_build_economic_module = yes
									can_build_defensive_module = yes
								}
							}	
						}
						AND = {
							sector_controlled = no
							OR = {
								AND = {
									OR = {
										owner = { has_policy_flag = core_specialized_stardock_module_construction }
										has_planet_flag = spaceport_automation_stardock_specialized
									}	
									can_build_stardock_module = yes
								}							
								AND = {
									OR = {
										owner = { has_policy_flag = core_specialized_economic_module_construction }
										has_planet_flag = spaceport_automation_economic_specialized
									}	
									can_build_economic_module = yes
								}								
								AND = {
									OR = {
										owner = { has_policy_flag = core_specialized_defensive_module_construction }
										has_planet_flag = spaceport_automation_defensive_specialized
									}	
									can_build_defensive_module = yes
								}																
								AND = {
									OR = {
										owner = { 
											OR = {
												has_policy_flag = core_mixed_economic_emphasis_module_construction
												has_policy_flag = core_mixed_defensive_emphasis_module_construction												
											}
										}	
										has_planet_flag = spaceport_automation_economic_mixed
										has_planet_flag = spaceport_automation_defensive_mixed
									}	
									can_build_economic_module = yes
									can_build_defensive_module = yes
								}
							}	
						}						
					}	
				}
			}	
			if = {
				limit = { sector_controlled = yes }
				if = { 
					limit = { owner = { has_policy_flag = sector_specialized_economic_module_construction } }
					roll_economic_module = yes
					break = yes
				}	
				if = { 
					limit = { owner = { has_policy_flag = sector_mixed_economic_emphasis_module_construction } }
					random_list = {
						75 = { roll_economic_module = yes }
						25 = { roll_defensive_module = yes }
					}	
					break = yes
				}	
				if = { 
					limit = { owner = { has_policy_flag = sector_specialized_defensive_module_construction } }
					roll_defensive_module = yes
					break = yes
				}
				if = { 
					limit = { owner = { has_policy_flag = sector_mixed_defensive_emphasis_module_construction } }
					random_list = {
						25 = { roll_economic_module = yes }
						75 = { roll_defensive_module = yes }
					}	
					break = yes
				}			
			}
			if = {
				limit = { sector_controlled = no }
				if = { 
					limit = { 
						OR = {
							owner = { has_policy_flag = core_specialized_economic_module_construction }
							has_planet_flag = spaceport_automation_economic_specialized
						}	
					}
					roll_economic_module = yes
					break = yes
				}	
				if = { 
					limit = { 
						OR = {
							owner = { has_policy_flag = core_mixed_economic_emphasis_module_construction }
							has_planet_flag = spaceport_automation_economic_mixed
						}	
					}
					random_list = {
						75 = { roll_economic_module = yes }
						25 = { roll_defensive_module = yes }
					}	
					break = yes
				}	
				if = { 
					limit = { 
						OR = {
							owner = { has_policy_flag = core_specialized_defensive_module_construction }
							has_planet_flag = spaceport_automation_defensive_specialized
						}	
					}
					roll_defensive_module = yes
					break = yes
				}
				if = { 
					limit = { 
						OR = {
							owner = { has_policy_flag = core_mixed_defensive_emphasis_module_construction }
							has_planet_flag = spaceport_automation_defensive_mixed
						}	
					}
					random_list = {
						25 = { roll_economic_module = yes }
						75 = { roll_defensive_module = yes }
					}	
					break = yes
				}
				if = { 
					limit = { 
						OR = {
							owner = { has_policy_flag = core_specialized_stardock_module_construction }
							has_planet_flag = spaceport_automation_stardock_specialized
						}	
					}
					roll_stardock_module = yes
					break = yes
				}				
			}
			else = { planet_event = { id = ex_spaceport_events.101 days = 30 } } ## this in combination with the main limit field is a failsafe meant to assure modules will be constructed no matter what. 
		}	
	}
}

#cleanup events 

country_event = { #fired using the on_policy_change on action trigger. This event removes redundant planetary flags from edicts.
	id = ex_spaceport_events.110
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		last_changed_policy = spaceport_automation
		NOT = { has_policy_flag = core_edicts }
	}	
	
	immediate = {
		every_owned_planet = {
			limit = {
				OR = {
					has_planet_flag = spaceport_automation_economic_specialized	
					has_planet_flag = spaceport_automation_economic_mixed
					has_planet_flag = spaceport_automation_stardock_specialized
					has_planet_flag = spaceport_automation_defensive_specialized
					has_planet_flag = spaceport_automation_defensive_mixed
					has_planet_flag = spaceport_automation_disable_local
				}		
			}
			remove_planet_flag = spaceport_automation_economic_specialized	
			remove_planet_flag = spaceport_automation_economic_mixed
			remove_planet_flag = spaceport_automation_stardock_specialized
			remove_planet_flag = spaceport_automation_defensive_specialized
			remove_planet_flag = spaceport_automation_defensive_mixed	
			remove_planet_flag = spaceport_automation_disable_local			
		}
	}
}	

country_event = { #fired using the on_policy_change on action trigger. This event removes the "unavailable" and "under construction" placeholder modules from any spaceport that has automation disabled. 
	id = ex_spaceport_events.111
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		last_changed_policy = spaceport_automation
		has_policy_flag = spaceport_automation_disabled
	}	
	
	immediate = {
		every_owned_planet = {
			limit = {
				has_spaceport = yes	
				OR = {
					has_spaceport_module = slot_unavailable_9
					has_spaceport_module = slot_unavailable_8
					has_spaceport_module = slot_unavailable_7
					has_spaceport_module = slot_unavailable_6
					has_spaceport_module = slot_unavailable_5
					has_spaceport_module = slot_unavailable_4
					has_spaceport_module = slot_unavailable_3
					has_spaceport_module = slot_unavailable_2
					has_spaceport_module = slot_unavailable_1
					has_spaceport_module = module_under_construction
				}						
			}
			if = { limit = { has_spaceport_module = slot_unavailable_9 } remove_spaceport_module = slot_unavailable_9 }
			if = { limit = { has_spaceport_module = slot_unavailable_8 } remove_spaceport_module = slot_unavailable_8 } 
			if = { limit = { has_spaceport_module = slot_unavailable_7 } remove_spaceport_module = slot_unavailable_7 }
			if = { limit = { has_spaceport_module = slot_unavailable_6 } remove_spaceport_module = slot_unavailable_6 }
			if = { limit = { has_spaceport_module = slot_unavailable_5 } remove_spaceport_module = slot_unavailable_5 }
			if = { limit = { has_spaceport_module = slot_unavailable_4 } remove_spaceport_module = slot_unavailable_4 }
			if = { limit = { has_spaceport_module = slot_unavailable_3 } remove_spaceport_module = slot_unavailable_3 }
			if = { limit = { has_spaceport_module = slot_unavailable_2 } remove_spaceport_module = slot_unavailable_2 }
			if = { limit = { has_spaceport_module = slot_unavailable_1 } remove_spaceport_module = slot_unavailable_1 }
			if = { limit = { has_spaceport_module = module_under_construction } remove_spaceport_module = module_under_construction }
		}
	}
}

planet_event = { #fired on a daily tick, removing the "unavailable" and "under construction" placeholder modules from any spaceport that has automation disabled local planet flag. 
	id = ex_spaceport_events.112
	hide_window = yes	
	
	trigger = {
		has_planet_flag = spaceport_automation_disable_local
		has_spaceport = yes
		OR = {
			has_spaceport_module = slot_unavailable_9
			has_spaceport_module = slot_unavailable_8
			has_spaceport_module = slot_unavailable_7
			has_spaceport_module = slot_unavailable_6
			has_spaceport_module = slot_unavailable_5
			has_spaceport_module = slot_unavailable_4
			has_spaceport_module = slot_unavailable_3
			has_spaceport_module = slot_unavailable_2
			has_spaceport_module = slot_unavailable_1
			has_spaceport_module = module_under_construction
		}				
	}	
	
	immediate = {
		if = { limit = { has_spaceport_module = slot_unavailable_9 } remove_spaceport_module = slot_unavailable_9 }
		if = { limit = { has_spaceport_module = slot_unavailable_8 } remove_spaceport_module = slot_unavailable_8 } 
		if = { limit = { has_spaceport_module = slot_unavailable_7 } remove_spaceport_module = slot_unavailable_7 }
		if = { limit = { has_spaceport_module = slot_unavailable_6 } remove_spaceport_module = slot_unavailable_6 }
		if = { limit = { has_spaceport_module = slot_unavailable_5 } remove_spaceport_module = slot_unavailable_5 }
		if = { limit = { has_spaceport_module = slot_unavailable_4 } remove_spaceport_module = slot_unavailable_4 }
		if = { limit = { has_spaceport_module = slot_unavailable_3 } remove_spaceport_module = slot_unavailable_3 }
		if = { limit = { has_spaceport_module = slot_unavailable_2 } remove_spaceport_module = slot_unavailable_2 }
		if = { limit = { has_spaceport_module = slot_unavailable_1 } remove_spaceport_module = slot_unavailable_1 }
		if = { limit = { has_spaceport_module = module_under_construction } remove_spaceport_module = module_under_construction }
	}
}		
	