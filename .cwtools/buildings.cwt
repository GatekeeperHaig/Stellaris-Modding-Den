types = {
	type[building] = {
		path = "game/common/buildings"
	}
}

building = {
	## cardinality = 0..1
	icon = scalar
	## cardinality = 0..1
	planet_unique = bool
	## cardinality = 0..1
	empire_unique = bool
	## cardinality = 0..1
	is_listed = bool
	## cardinality = 0..1
	event_building = bool
	## cardinality = 0..1
	is_colony = bool
	## cardinality = 0..1
	ai_replace = bool
	## cardinality = 0..1
	immune_to_bombardment = bool
	## cardinality = 0..1
	can_demolish = bool
	## cardinality = 0..1
	protects_from_bombardment = bool
	## cardinality = 0..1
	planetary_ftl_inhibitor = bool
	## cardinality = 0..1
	defense_armies = int
	## cardinality = 0..1
	requires_pop = bool
	## cardinality = 0..1
	event_building = bool
	
	## cardinality = 0..1
	tags = { localisation }
	
	## cardinality = 0..1
	capital = yes
	## cardinality = 0..1
	level = int
	## cardinality = 0..1
	prerequisites = { 
		<technology>
	}
	subtype[event_building] = {
		## cardinality = 0..1
		cost = {
			## cardinality = 0..100
			<resource> = int
		}
	}
	subtype[!event_building] = {
		cost = {
			## cardinality = 0..100
			<resource> = int
		}
	}
	## cardinality = 0..1
	base_buildtime = int
	## cardinality = 0..1
	required_resources = { 
		## cardinality = 0..100
		<resource> = int
	} 
	## cardinality = 0..1
	produced_resources = { 	
		## cardinality = 0..100
		<resource> = int
	}
	## cardinality = 0..1
	produced_resource_trigger = { ###scope = country, cannot scope to planet or tile 
		## cardinality = 0..100
		modifier = { 
			alias_name[trigger] = alias_match_left[trigger]
			resources = {
				## cardinality = 1..100
				<resource> = float
			}
		}
	}	
	## cardinality = 0..1
	###accepts only tile_building_resource_xyz_add = type modifiers
	adjacency_bonus = { 
		## cardinality = 0..100
		alias_name[modifier] = alias_match_left[modifier]
	}
	## cardinality = 0..1
	###accepts planet modifiers
	planet_modifier = { 
		## cardinality = 0..100
		alias_name[modifier] = alias_match_left[modifier]
	}
	## cardinality = 0..1
	army_modifier = { 
		## cardinality = 0..100
		alias_name[modifier] = alias_match_left[modifier]
	}
	## cardinality = 0..1
	###accepts country modifiers
	country_modifier = { 
		## cardinality = 0..100
		alias_name[modifier] = alias_match_left[modifier]
	}
	## cardinality = 0..100
	###scope = planet, owner = country, tile = tile.
	triggered_planet_modifier = { 
		key = localisation
		potential = { 
			alias_name[trigger] = alias_match_left[trigger]
		}
		modifier = { 
			## cardinality = 0..100
			alias_name[modifier] = alias_match_left[modifier]
		}	
	}
	## cardinality = 0..100
	###scope = pop, tile = tile, from/planet = planet, owner = country
	planet_modifier_with_pop_trigger = { 
		key = localisation		
		## cardinality = 0..1
		potential = { 			
			alias_name[trigger] = alias_match_left[trigger]
		}
		modifier = { 
			## cardinality = 0..100
			alias_name[modifier] = alias_match_left[modifier]
		}
	}
	## cardinality = 0..1
	allow = { 
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..1
	###scope = country, planet = planet
	show_tech_unlock_if = { 
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..1
	###scope planet, tile = tile, owner = country 
	destroy_if = { 
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..1
	###scope planet, tile = tile, owner = country
	potential = { 
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..1
	###scope = pop, tile = tile, from/planet = planet, owner = country
	active = { 
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..1
	on_queued = { 
		alias_name[effect] = alias_match_left[effect]
	}
	## cardinality = 0..1
	on_unqueued = { 
		alias_name[effect] = alias_match_left[effect]
	}
	## cardinality = 0..1
	###can have multiple keys
	upgrades = { <building> } 
	
	## cardinality = 0..1
	###scope tile, from/planet = planet, owner = country
	ai_allow = { 
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..1
	###scope tile, from/planet = planet, owner = country
	ai_weight = { 
		## cardinality = 0..100
		weight = float
		## cardinality = 0..100
		factor = float
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}	
}	