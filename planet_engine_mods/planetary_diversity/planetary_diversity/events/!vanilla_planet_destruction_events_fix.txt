namespace = planet_destruction

# Neutron Beam
planet_event = {
	id = planet_destruction.300
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				exists = owner
				owner = { NOT = { is_same_value = from.owner } }
			}
			from.owner = {
				country_event = { id = planet_destruction.301 }
			}
		}

		#Dismantle observation post
		if = {
			limit = {
				has_observation_outpost = yes
			}
			observation_outpost_owner = {
				country_event = { id = planet_destruction.1000 days = 1 }
			}
		}

		# Swarm Situation Log counter
		if = {
			limit = {
				exists = owner
				owner = { is_country_type = swarm }
			}
			every_country = {
				limit = { has_event_chain = "prethoryn_scourge_chain" }
				add_event_chain_counter = {
					event_chain = "prethoryn_scourge_chain"
					counter = "infested_worlds"
					amount = -1 
				}
				add_event_chain_counter = {
					event_chain = "prethoryn_scourge_chain"
					counter = "infested_worlds_cleansed"
					amount = 1 
				}
			}
		}

		if = {
			limit = {
				OR = {
					is_active_resolution = "resolution_rulesofwar_independent_tribunals"
					is_active_resolution = "resolution_rulesofwar_last_resort_doctrine"
					is_active_resolution = "resolution_rulesofwar_demobilization_initiative"
				}
			}
			from.owner = {
				set_timed_country_flag = { flag = resolution_breached_fired_neutron days = 3600 }
			}
		}

		if = {
			limit = {
				exists = owner
				owner = {
					NOT = { is_same_value = from.owner }
					OR = {
						is_country_type = default
						is_country_type = fallen_empire
						is_country_type = awakened_fallen_empire
					}
				}
			}
			# Generate threat
			add_threat = { who = from.owner amount = 3 }
			# modifier for allies + those upset by genocide
			every_country = {
				limit = {
					NOR = {
						is_same_value = from.owner
						is_same_value = root.owner
						AND = {
							has_federation = yes
							is_in_federation_with = from.owner
						}
					}
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
					OR = {
						AND = {
							has_federation = yes
							is_in_federation_with = root.owner
						}
						has_ai_personality = awakened_fallen_empire_xenophile
						AND = {
							is_country_type = default
							OR = {
								is_egalitarian = yes
								is_xenophile = yes
								is_spiritualist = yes
							}
						}
					}
				}
				add_opinion_modifier = {
					modifier = opinion_swept_a_world
					who = from.owner
				}
			}
			# modifiers for victim
			owner = {
				add_opinion_modifier = {
					modifier = opinion_swept_my_world
					who = from.owner
				}
				if = {
					limit = { NOT = { has_ethic = ethic_gestalt_consciousness } }
					add_modifier = {
						modifier = colossus_victim
						days = 10800 # 30 years
					}
				}
			}
		}
		else_if = {
			limit = {
				exists = owner
				owner = { is_country_type = primitive }
			}
			# modifier for allies + those upset by genocide
			every_country = {
				limit = {
					NOT = { is_same_value = from.owner }
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
					is_country_type = default
					NOR = {
						is_xenophobe = yes
						is_homicidal = yes
						is_xenophile = yes
					}
				}
				add_opinion_modifier = {
					modifier = opinion_swept_a_primitive_world
					who = from.owner
				}
			}
			every_country = {
				limit = {
					NOT = { is_same_value = from.owner }
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
					OR = {
						has_ai_personality = awakened_fallen_empire_xenophile
						AND = {
							is_country_type = default
							is_xenophile = yes
						}
					}
				}
				add_opinion_modifier = {
					modifier = opinion_swept_a_primitive_world_phile
					who = from.owner
				}
			}
		}
		# Add war exhaustion to planet owner
		owner = {
			if = {
				limit = { #isn't the case when the crisis bombards planets, for instance
					is_at_war_with = from.fleet.owner
				}
				add_static_war_exhaustion = {
					attacker = from.fleet.owner
					location = root
					value_for_planet_destruction = 1.0
				}
			}
		}
		every_owned_pop = {
			from.owner = {
				if = {
					limit = { has_ascension_perk = ap_become_the_crisis }
					complete_crisis_objective = crisobj_purge_pops
				}
			}
		}
		destroy_colony = yes
		add_modifier = {
			modifier = neutron_bombarded
			days = 3600
		}	
		# Special graphics for Habitats and Ring Worlds
		if = {
			limit = {
				is_planet_class = pc_habitat
			}
			spawn_habitat_neutron_effect = yes
		}
		else_if = {
			limit = {
				is_planet_class = pc_ringworld_habitable
			}
			spawn_ringworld_neutron_effect = yes
		}
		if = {
			limit = {
				OR = {
					is_planet_class = pc_habitat
					is_planet_class = pc_ringworld_habitable
				}
			}
			# nothing
		}
		else = {
			switch = {
				trigger = is_planet_class
				pc_desert = { change_pc = pc_desert }
				pc_arid = { change_pc = pc_arid }
				pc_savannah = { change_pc = pc_savannah }
				pc_ocean = { change_pc = pc_ocean }
				pc_continental = { change_pc = pc_continental }
				pc_tropical = { change_pc = pc_tropical }
				pc_tundra = { change_pc = pc_tundra }
				pc_arctic = { change_pc = pc_arctic }
				pc_alpine = { change_pc = pc_alpine }
				pc_snow = { change_pc = pc_snow }
				pc_highland = { change_pc = pc_highland }
				pc_duneforest = { change_pc = pc_duneforest }
				pc_tidallylocked = { change_pc = pc_tidallylocked }
				pc_tidallygaia = { change_pc = pc_tidallygaia }
				pc_tidallyaquatic = { change_pc = pc_tidallyaquatic }
				pc_supercon = { change_pc = pc_supercon }
				pc_mangrove = { change_pc = pc_mangrove }
				pc_wetswamp = { change_pc = pc_wetswamp }
				pc_fog = { change_pc = pc_fog }
				pc_desertislands = { change_pc = pc_desertislands }
				pc_hajungle = { change_pc = pc_hajungle }
				pc_cenote = { change_pc = pc_cenote }
				pc_cascadian = { change_pc = pc_cascadian }
				pc_swamp = { change_pc = pc_swamp }
				pc_mud = { change_pc = pc_mud }
				pc_basalt = { change_pc = pc_basalt }
				pc_subarctic = { change_pc = pc_subarctic }
				pc_glacial = { change_pc = pc_glacial }
				pc_geothermal = { change_pc = pc_geothermal }
				pc_sandsea = { change_pc = pc_sandsea }
				pc_mesa = { change_pc = pc_mesa }
				pc_badlands = { change_pc = pc_badlands }
				pc_outback = { change_pc = pc_outback }
				pc_coastal = { change_pc = pc_coastal }
				pc_oasis = { change_pc = pc_oasis }
				pc_hadesert = { change_pc = pc_hadesert }
				pc_steppe = { change_pc = pc_steppe }
				pc_frozen_desert = { change_pc = pc_frozen_desert }
				pc_boreal = { change_pc = pc_boreal }
				pc_ammonia = { change_pc = pc_ammonia }
				pc_sulfur = { change_pc = pc_sulfur }
				pc_acid = { change_pc = pc_acid }
				pc_methane = { change_pc = pc_methane }
				pc_crystal = { change_pc = pc_crystal }
				pc_floating = { change_pc = pc_floating }
				pc_crucible = { change_pc = pc_crucible }
				pc_shroud_crucible = { change_pc = pc_shroud_crucible }
				pc_clean_crucible = { change_pc = pc_clean_crucible }
				pc_graveyard = { change_pc = pc_graveyard }
				pc_mushroom = { change_pc = pc_mushroom }
				pc_superhabitable = { change_pc = pc_superhabitable }
				pc_retinal = { change_pc = pc_retinal }	
				pc_forest = { change_pc = pc_forest }
				pc_lake = { change_pc = pc_lake }	
				pc_tepid = { change_pc = pc_tepid }		
				pc_ecocity = { change_pc = pc_ecocity }	
				pc_corpoarc = { change_pc = pc_corpoarc }	
				pc_palacearc = { change_pc = pc_palacearc }	
				pc_capitalarc = { change_pc = pc_capitalarc }	
				pc_necropolis = { change_pc = pc_necropolis }	
				pc_machine_necropolis = { change_pc = pc_machine_necropolis }	
				pc_necrohive = { change_pc = pc_necrohive }	
				pc_milarc = { change_pc = pc_milarc }		
				pc_biofort = { change_pc = pc_biofort }		
				pc_megaflorafort = { change_pc = pc_megaflorafort }	
				pc_machine_fort = { change_pc = pc_machine_fort }	
				pc_prairie = { change_pc = pc_prairie }	
				pc_veld = { change_pc = pc_veld }	
				pc_semiarid = { change_pc = pc_semiarid }
				pc_med = { change_pc = pc_med }	
				pc_machine_factory = { change_pc = pc_machine_factory }
				pc_machine_capital = { change_pc = pc_machine_capital }
				pc_bioforge = { change_pc = pc_bioforge }
				pc_biocapital = { change_pc = pc_biocapital }
				pc_irradiated = { change_pc = pc_irradiated }
				pc_karst = { change_pc = pc_karst }
				pc_reef = { change_pc = pc_reef }
				pc_ash = { change_pc = pc_ash }
				pc_primal = { change_pc = pc_primal }
				pc_salt = { change_pc = pc_salt }
				pc_aquifer = { change_pc = pc_aquifer }
				pc_coral = { change_pc = pc_coral }
				pc_storm = { change_pc = pc_storm }
				pc_rogue = { change_pc = pc_rogue }
				pc_lichen = { change_pc = pc_lichen }
				pc_eyeball = { change_pc = pc_eyeball }
				pc_glacio = { change_pc = pc_glacio }
				pc_lanthanide = { change_pc = pc_lanthanide }
				pc_megaflora = { change_pc = pc_megaflora }
				pc_megaflorahive = { change_pc = pc_megaflorahive }
				pc_megafloratol = { change_pc = pc_megafloratol }
				pc_pdhive1 = { change_pc = pc_pdhive1 }
				pc_pdhive2 = { change_pc = pc_pdhive2 }
				pc_aquatic = { change_pc = pc_aquatic }
				pc_pd_barren_hab = { change_pc = pc_pd_barren_hab }
				pc_pd_barren_cold_hab = { change_pc = pc_pd_barren_cold_hab }
				pc_pd_gas_giant_hab = { change_pc = pc_pd_gas_giant_hab }
				pc_pd_molten_hab = { change_pc = pc_pd_molten_hab }
				pc_pd_frozen_hab = { change_pc = pc_pd_frozen_hab }
				pc_pd_toxic_hab = { change_pc = pc_pd_toxic_hab }
				pc_pd_hothouse_hab = { change_pc = pc_pd_hothouse_hab }
				pc_pd_asteroid_hab = { change_pc = pc_pd_asteroid_hab }
				pc_pdshroud = { change_pc = pc_pdshroud }
			}
		}
		# For Infested worlds
		if = {
			limit = { is_planet_class = pc_infested }
			random_list = {
				50 = { change_pc = pc_barren }
				50 = { change_pc = pc_barren_cold }
			}
			add_modifier = { modifier = "terraforming_candidate" days = -1 }
		}
	}
}

country_event = {
	id = planet_destruction.301
	title = planet_destruction.301.name
	desc = {
		text = planet_destruction.301.nobots.desc
		trigger = {
			from = {
				NOT = { 
					OR = {
						is_planet_class = pc_infested 
						is_planet_class = pc_barren
						is_planet_class = pc_barren_cold
					}
				}
				count_owned_pop = {
					count < 1
				}
			}
		}
	}
	desc = {
		text = planet_destruction.301.bots.desc
		trigger = {
			from = {
				count_owned_pop = {
					count > 0
				}
			}
		}
	}
	desc = {
		text = planet_destruction.301.infested.desc
		trigger = {
			from = {
				OR = {
					is_planet_class = pc_infested 
					is_planet_class = pc_barren
					is_planet_class = pc_barren_cold
				}
			}
		}
	}
	picture = GFX_evt_planet_beam
	show_sound = event_solar_fusion
	location = from
	

	is_triggered_only = yes

	trigger = {
		NOT = { has_country_flag = fired_neutron }
	}

	immediate = {
		set_country_flag = fired_neutron
	}

	option = {
		name = OK
		trigger = {
			NOR = {
				has_valid_civic = civic_fanatic_purifiers
				has_valid_civic = civic_machine_terminator
			}
		}
	}

	option = {
		name = planet_destruction.101.a.purifexter
		trigger = {
			OR = {
				has_valid_civic = civic_fanatic_purifiers
				has_valid_civic = civic_machine_terminator
			}
		}
		add_monthly_resource_mult = {
			resource = unity
			value = 60
			min = 600
			max = 3000
		}
	}
}

# God Ray
planet_event = {
	id = planet_destruction.400
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				NOT = { is_planet_class = pc_ai }
				exists = owner
				owner = { NOT = { is_same_value = from.owner } }
			}
			from.owner = {
				country_event = { id = planet_destruction.401 }
			}
		}

		# Contingency Machine World
		if = {
			limit = {
				is_planet_class = pc_ai
				NOT = { has_planet_flag = machine_lair }
			}
			set_planet_flag = destroyed_by_colossus
			set_planet_flag = planet_godrayed
			planet_event = { id = crisis.2040 }
			create_ambient_object = {
				location = this
				type = habitat_cracker_object
				duration = 5

				use_3d_location = yes
				base_angle_towards = star
				entity_face_object = star

				entity_offset = { min = 0 max = 0 }

				entity_scale_to_size = yes
				scale = 0.5
			}
		}

		# Contingency Final Machine World
		if = {
			limit = {
				is_planet_class = pc_ai
				has_planet_flag = machine_lair
			}
			set_planet_flag = destroyed_by_colossus
			set_planet_flag = planet_godrayed
			from.owner = { save_event_target_as = final_machine_world_destroyer }
			stop_crisis_sound = yes
			planet_event = { id = crisis.2046 }
			create_ambient_object = {
				location = this
				type = habitat_cracker_object
				duration = 5

				use_3d_location = yes
				base_angle_towards = star
				entity_face_object = star

				entity_offset = { min = 0 max = 0 }

				entity_scale_to_size = yes
				scale = 0.5
			}
		}

		if = {
			limit = {
				OR = {
					is_active_resolution = "resolution_rulesofwar_independent_tribunals"
					is_active_resolution = "resolution_rulesofwar_last_resort_doctrine"
					is_active_resolution = "resolution_rulesofwar_demobilization_initiative"
				}
			}
			from.owner = {
				set_timed_country_flag = { flag = resolution_breached_fired_godray days = 3600 }
			}
		}

		if = {
			limit = {
				NOT = { is_planet_class = pc_ai }
				exists = owner
				owner = {
					NOT = { is_same_value = from.owner }
					OR = {
						is_country_type = default
						is_country_type = fallen_empire
						is_country_type = awakened_fallen_empire
					}
				}
			}
			# Generate threat
			add_threat = { who = from.owner amount = 3 }
			# modifier for allies + those upset by conversion
			every_country = {
				limit = {
					NOR = {
						is_same_value = from.owner
						is_same_value = root.owner
						AND = {
							has_federation = yes
							is_in_federation_with = from.owner
						}
					}
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
					OR = {
						AND = {
							has_federation = yes
							is_in_federation_with = root.owner
						}
						has_ai_personality = awakened_fallen_empire_materialist
						AND = {
							is_country_type = default
							OR = {
								is_materialist = yes
								is_egalitarian = yes
								has_authority = auth_machine_intelligence
							}
						}
					}
				}
				add_opinion_modifier = {
					modifier = opinion_converted_a_world
					who = from.owner
				}
			}
			# modifiers for victim
			owner = {
				add_opinion_modifier = {
					modifier = opinion_converted_my_world
					who = from.owner
				}
				if = {
					limit = { NOT = { has_ethic = ethic_gestalt_consciousness } }
					add_modifier = {
						modifier = colossus_victim
						days = 10800 # 30 years
					}
				}
			}
			# Add war exhaustion to planet owner
			owner = {
				if = {
					limit = { #isn't the case when the crisis bombards planets, for instance
						is_at_war_with = from.fleet.owner
					}
					add_static_war_exhaustion = {
						attacker = from.fleet.owner
						location = root
						value_for_planet_destruction = 1.0
					}
				}
			}
		}
		every_owned_pop = {
			limit = {
				OR = {
					has_trait = trait_mechanical
					has_trait = trait_machine_unit
					has_trait = trait_hive_mind
					has_living_standard = { # Bio-trophies die without care
						country = root.owner
						type = living_standard_organic_trophy
					}
				}
			}
			kill_pop = yes
			from.owner = {
				if = {
					limit = { has_ascension_perk = ap_become_the_crisis }
					complete_crisis_objective = crisobj_purge_pops
				}
			}
		}
		every_owned_pop = {
			limit = {
				NOR = {
					has_trait = trait_mechanical
					has_trait = trait_machine_unit
					has_trait = trait_hive_mind
					has_living_standard = {
						country = root.owner
						type = living_standard_organic_trophy
					}
				}
			}
			pop_change_ethic = ethic_spiritualist
		}
		# Special graphics for Habitats and Ring Worlds
		if = {
			limit = {
				is_planet_class = pc_habitat
			}
			spawn_habitat_divine_effect = yes
		}
		else_if = {
			limit = {
				is_planet_class = pc_ringworld_habitable
			}
			spawn_ringworld_divine_effect = yes
		}
		if = {
			limit = {
				OR = {
					is_planet_class = pc_habitat
					is_planet_class = pc_ringworld_habitable
				}
			}
			# nothing
		}
		else = {
			switch = {
				trigger = is_planet_class
				pc_desert = { change_pc = pc_desert }
				pc_arid = { change_pc = pc_arid }
				pc_savannah = { change_pc = pc_savannah }
				pc_ocean = { change_pc = pc_ocean }
				pc_continental = { change_pc = pc_continental }
				pc_tropical = { change_pc = pc_tropical }
				pc_tundra = { change_pc = pc_tundra }
				pc_arctic = { change_pc = pc_arctic }
				pc_alpine = { change_pc = pc_alpine }
				pc_snow = { change_pc = pc_snow }
				pc_highland = { change_pc = pc_highland }
				pc_duneforest = { change_pc = pc_duneforest }
				pc_tidallylocked = { change_pc = pc_tidallylocked }
				pc_tidallygaia = { change_pc = pc_tidallygaia }
				pc_tidallyaquatic = { change_pc = pc_tidallyaquatic }
				pc_supercon = { change_pc = pc_supercon }
				pc_mangrove = { change_pc = pc_mangrove }
				pc_wetswamp = { change_pc = pc_wetswamp }
				pc_fog = { change_pc = pc_fog }
				pc_desertislands = { change_pc = pc_desertislands }
				pc_hajungle = { change_pc = pc_hajungle }
				pc_cenote = { change_pc = pc_cenote }
				pc_cascadian = { change_pc = pc_cascadian }
				pc_swamp = { change_pc = pc_swamp }
				pc_mud = { change_pc = pc_mud }
				pc_basalt = { change_pc = pc_basalt }
				pc_subarctic = { change_pc = pc_subarctic }
				pc_glacial = { change_pc = pc_glacial }
				pc_geothermal = { change_pc = pc_geothermal }
				pc_sandsea = { change_pc = pc_sandsea }
				pc_mesa = { change_pc = pc_mesa }
				pc_badlands = { change_pc = pc_badlands }
				pc_outback = { change_pc = pc_outback }
				pc_coastal = { change_pc = pc_coastal }
				pc_oasis = { change_pc = pc_oasis }
				pc_hadesert = { change_pc = pc_hadesert }
				pc_steppe = { change_pc = pc_steppe }
				pc_frozen_desert = { change_pc = pc_frozen_desert }
				pc_boreal = { change_pc = pc_boreal }
				pc_ammonia = { change_pc = pc_ammonia }
				pc_sulfur = { change_pc = pc_sulfur }
				pc_acid = { change_pc = pc_acid }
				pc_methane = { change_pc = pc_methane }
				pc_crystal = { change_pc = pc_crystal }
				pc_floating = { change_pc = pc_floating }
				pc_crucible = { change_pc = pc_crucible }
				pc_shroud_crucible = { change_pc = pc_shroud_crucible }
				pc_clean_crucible = { change_pc = pc_clean_crucible }
				pc_graveyard = { change_pc = pc_graveyard }
				pc_mushroom = { change_pc = pc_mushroom }
				pc_superhabitable = { change_pc = pc_superhabitable }
				pc_retinal = { change_pc = pc_retinal }		
				pc_forest = { change_pc = pc_forest }
				pc_lake = { change_pc = pc_lake }	
				pc_tepid = { change_pc = pc_tepid }		
				pc_ecocity = { change_pc = pc_ecocity }
				pc_corpoarc = { change_pc = pc_corpoarc }	
				pc_palacearc = { change_pc = pc_palacearc }	
				pc_capitalarc = { change_pc = pc_capitalarc }		
				pc_necropolis = { change_pc = pc_necropolis }
				pc_machine_necropolis = { change_pc = pc_machine_necropolis }	
				pc_necrohive = { change_pc = pc_necrohive }		
				pc_milarc = { change_pc = pc_milarc }		
				pc_biofort = { change_pc = pc_biofort }		
				pc_megaflorafort = { change_pc = pc_megaflorafort }	
				pc_machine_fort = { change_pc = pc_machine_fort }	
				pc_prairie = { change_pc = pc_prairie }	
				pc_veld = { change_pc = pc_veld }	
				pc_semiarid = { change_pc = pc_semiarid }
				pc_med = { change_pc = pc_med }	
				pc_machine_factory = { change_pc = pc_machine_factory }
				pc_machine_capital = { change_pc = pc_machine_capital }
				pc_bioforge = { change_pc = pc_bioforge }
				pc_biocapital = { change_pc = pc_biocapital }
				pc_irradiated = { change_pc = pc_irradiated }
				pc_karst = { change_pc = pc_karst }
				pc_reef = { change_pc = pc_reef }
				pc_ash = { change_pc = pc_ash }
				pc_primal = { change_pc = pc_primal }
				pc_salt = { change_pc = pc_salt }
				pc_aquifer = { change_pc = pc_aquifer }
				pc_coral = { change_pc = pc_coral }
				pc_storm = { change_pc = pc_storm }
				pc_rogue = { change_pc = pc_rogue }
				pc_lichen = { change_pc = pc_lichen }
				pc_eyeball = { change_pc = pc_eyeball }
				pc_glacio = { change_pc = pc_glacio }
				pc_lanthanide = { change_pc = pc_lanthanide }
				pc_megaflora = { change_pc = pc_megaflora }
				pc_megaflorahive = { change_pc = pc_megaflorahive }
				pc_megafloratol = { change_pc = pc_megafloratol }
				pc_pdhive1 = { change_pc = pc_pdhive1 }
				pc_pdhive2 = { change_pc = pc_pdhive2 }
				pc_aquatic = { change_pc = pc_aquatic }
				pc_pd_barren_hab = { change_pc = pc_pd_barren_hab }
				pc_pd_barren_cold_hab = { change_pc = pc_pd_barren_cold_hab }
				pc_pd_gas_giant_hab = { change_pc = pc_pd_gas_giant_hab }
				pc_pd_molten_hab = { change_pc = pc_pd_molten_hab }
				pc_pd_frozen_hab = { change_pc = pc_pd_frozen_hab }
				pc_pd_toxic_hab = { change_pc = pc_pd_toxic_hab }
				pc_pd_hothouse_hab = { change_pc = pc_pd_hothouse_hab }
				pc_pd_asteroid_hab = { change_pc = pc_pd_asteroid_hab }
				pc_pdshroud = { change_pc = pc_pdshroud }
			}
		}
		add_modifier = {
			modifier = god_rayed
			days = 3600
		}
		# self-raying
		if = {
			limit = {
				exists = owner
				owner = { is_same_value = from.owner }
			}
			add_modifier = {
				modifier = uneasy_faith
				days = 3600
			}
		}
	}
}

country_event = {
	id = planet_destruction.401
	title = planet_destruction.401.name
	desc = planet_destruction.401.desc
	picture = GFX_evt_planet_beam
	show_sound = event_mystic_reveal
	location = from
	
	is_triggered_only = yes

	trigger = {
		NOT = { has_country_flag = fired_godray }
	}

	immediate = {
		set_country_flag = fired_godray
	}

	option = {
		name = OK
		from = {
			custom_tooltip = planet_destruction.401.tooltip
		}
	}
}

# Nanobot Assimilation
planet_event = {
	id = planet_destruction.500
	hide_window = yes

	is_triggered_only = yes

	immediate = { # remove hive mind?
		from.owner = { country_event = { id = planet_destruction.501 } }

		if = {
			limit = {
				OR = {
					is_active_resolution = "resolution_rulesofwar_independent_tribunals"
					is_active_resolution = "resolution_rulesofwar_last_resort_doctrine"
					is_active_resolution = "resolution_rulesofwar_demobilization_initiative"
				}
			}
			from.owner = {
				set_timed_country_flag = { flag = resolution_breached_fired_assimilator days = 3600 }
			}
		}
		
		if = {
			limit = {
				exists = owner
				owner = {
					NOT = { is_same_value = from.owner }
					OR = {
						is_country_type = default
						is_country_type = fallen_empire
						is_country_type = awakened_fallen_empire
					}
				}
			}
			# Generate threat
			add_threat = { who = from.owner amount = 3 }
			# modifier for allies + those upset by robots
			every_country = {
				limit = {
					NOR = {
						is_same_value = from.owner
						is_same_value = root.owner
						AND = {
							has_federation = yes
							is_in_federation_with = from.owner
						}
					}
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
					OR = {
						AND = {
							has_federation = yes
							is_in_federation_with = root.owner
						}
						has_ai_personality = awakened_fallen_empire_spiritualist
						AND = {
							is_country_type = default
							OR = {
								is_egalitarian = yes
								is_spiritualist = yes
							}
						}
					}
				}
				add_opinion_modifier = {
					modifier = opinion_assimilated_a_world
					who = from.owner
				}
			}
			# modifiers for victim
			owner = {
				add_opinion_modifier = {
					modifier = opinion_assimilated_my_world
					who = from.owner
				}
				if = {
					limit = { NOT = { has_ethic = ethic_gestalt_consciousness } }
					add_modifier = {
						modifier = colossus_victim
						days = 10800 # 30 years
					}
				}
			}
		}
		else_if = {
			limit = {
				exists = owner
				owner = { is_country_type = primitive }
			}
			# modifier for allies + those upset by genocide
			every_country = {
				limit = {
					NOR = { is_same_value = from.owner }
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
					is_country_type = default
					NOR = {
						is_xenophobe = yes
						is_homicidal = yes
						is_xenophile = yes
					}
				}
				add_opinion_modifier = {
					modifier = opinion_assimilated_a_primitive_world
					who = from.owner
				}
			}
			every_country = {
				limit = {
					NOR = { is_same_value = from.owner }
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
					OR = {
						has_ai_personality = awakened_fallen_empire_xenophile
						AND = {
							is_country_type = default
							is_xenophile = yes
						}
					}
				}
				add_opinion_modifier = {
					modifier = opinion_assimilated_a_primitive_world_phile
					who = from.owner
				}
			}
		}
		# Add war exhaustion to planet owner
		owner = {
			if = {
				limit = { #isn't the case when the crisis bombards planets, for instance
					is_at_war_with = from.fleet.owner
				}
				add_static_war_exhaustion = {
					attacker = from.fleet.owner
					location = root
					value_for_planet_destruction = 1.0
				}
			}
		}
				if = {
			limit = {
				exists = owner
				owner = { is_same_value = from.owner }
			}
			# already owned
		}
		else = {
			set_owner = from.owner
		}
		every_owned_pop = {
			limit = {
				is_valid_pop_for_PLANET_KILLER_NANOBOTS = yes
			}
			modify_species = {
				species = this
				add_trait = trait_cybernetic
				add_traits_at_start_of_list = yes
				change_scoped_species = yes
			}
		}
		every_owned_pop = {
			limit = {
				OR = {
					has_trait = trait_hive_mind
					has_trait = trait_mechanical
					has_trait = trait_machine_unit
				}
			}
			kill_pop = yes
		}
		every_owned_pop = {
			limit = {
				has_modifier = pop_recently_conquered
			}
			remove_modifier = pop_recently_conquered
		}
		every_owned_pop = {
			set_citizenship_type = {
				type = citizenship_full_machine
				cooldown = yes
			}
		}
		# Special graphics for Habitats and Ring Worlds
		if = {
			limit = {
				is_planet_class = pc_habitat
			}
			spawn_habitat_nanobot_effect = yes
		}
		else_if = {
			limit = {
				is_planet_class = pc_ringworld_habitable
			}
			spawn_ringworld_nanobot_effect = yes
		}
		if = {
			limit = {
				OR = {
					is_planet_class = pc_habitat
					is_planet_class = pc_ringworld_habitable
				}
			}
			# nothing
		}
		else = {
			switch = {
				trigger = is_planet_class
				pc_desert = { change_pc = pc_desert }
				pc_arid = { change_pc = pc_arid }
				pc_savannah = { change_pc = pc_savannah }
				pc_ocean = { change_pc = pc_ocean }
				pc_continental = { change_pc = pc_continental }
				pc_tropical = { change_pc = pc_tropical }
				pc_tundra = { change_pc = pc_tundra }
				pc_arctic = { change_pc = pc_arctic }
				pc_alpine = { change_pc = pc_alpine }
				pc_snow = { change_pc = pc_snow }
				pc_highland = { change_pc = pc_highland }
				pc_duneforest = { change_pc = pc_duneforest }
				pc_tidallylocked = { change_pc = pc_tidallylocked }
				pc_tidallygaia = { change_pc = pc_tidallygaia }
				pc_tidallyaquatic = { change_pc = pc_tidallyaquatic }
				pc_supercon = { change_pc = pc_supercon }
				pc_mangrove = { change_pc = pc_mangrove }
				pc_wetswamp = { change_pc = pc_wetswamp }
				pc_fog = { change_pc = pc_fog }
				pc_desertislands = { change_pc = pc_desertislands }
				pc_hajungle = { change_pc = pc_hajungle }
				pc_cenote = { change_pc = pc_cenote }
				pc_cascadian = { change_pc = pc_cascadian }
				pc_swamp = { change_pc = pc_swamp }
				pc_mud = { change_pc = pc_mud }
				pc_basalt = { change_pc = pc_basalt }
				pc_subarctic = { change_pc = pc_subarctic }
				pc_glacial = { change_pc = pc_glacial }
				pc_geothermal = { change_pc = pc_geothermal }
				pc_sandsea = { change_pc = pc_sandsea }
				pc_mesa = { change_pc = pc_mesa }
				pc_badlands = { change_pc = pc_badlands }
				pc_outback = { change_pc = pc_outback }
				pc_coastal = { change_pc = pc_coastal }
				pc_oasis = { change_pc = pc_oasis }
				pc_hadesert = { change_pc = pc_hadesert }
				pc_steppe = { change_pc = pc_steppe }
				pc_frozen_desert = { change_pc = pc_frozen_desert }
				pc_boreal = { change_pc = pc_boreal }
				pc_ammonia = { change_pc = pc_ammonia }
				pc_sulfur = { change_pc = pc_sulfur }
				pc_acid = { change_pc = pc_acid }
				pc_methane = { change_pc = pc_methane }
				pc_crystal = { change_pc = pc_crystal }
				pc_floating = { change_pc = pc_floating }
				pc_crucible = { change_pc = pc_crucible }
				pc_shroud_crucible = { change_pc = pc_shroud_crucible }
				pc_clean_crucible = { change_pc = pc_clean_crucible }
				pc_graveyard = { change_pc = pc_graveyard }
				pc_mushroom = { change_pc = pc_mushroom }
				pc_superhabitable = { change_pc = pc_superhabitable }
				pc_retinal = { change_pc = pc_retinal }	
				pc_forest = { change_pc = pc_forest }	
				pc_lake = { change_pc = pc_lake }
				pc_tepid = { change_pc = pc_tepid }			
				pc_ecocity = { change_pc = pc_ecocity }	
				pc_corpoarc = { change_pc = pc_corpoarc }	
				pc_palacearc = { change_pc = pc_palacearc }	
				pc_capitalarc = { change_pc = pc_capitalarc }	
				pc_necropolis = { change_pc = pc_necropolis }	
				pc_machine_necropolis = { change_pc = pc_machine_necropolis }	
				pc_necrohive = { change_pc = pc_necrohive }		
				pc_milarc = { change_pc = pc_milarc }		
				pc_biofort = { change_pc = pc_biofort }		
				pc_megaflorafort = { change_pc = pc_megaflorafort }	
				pc_machine_fort = { change_pc = pc_machine_fort }	
				pc_prairie = { change_pc = pc_prairie }	
				pc_veld = { change_pc = pc_veld }	
				pc_semiarid = { change_pc = pc_semiarid }
				pc_med = { change_pc = pc_med }	
				pc_machine_factory = { change_pc = pc_machine_factory }
				pc_machine_capital = { change_pc = pc_machine_capital }
				pc_bioforge = { change_pc = pc_bioforge }
				pc_biocapital = { change_pc = pc_biocapital }
				pc_irradiated = { change_pc = pc_irradiated }
				pc_karst = { change_pc = pc_karst }
				pc_reef = { change_pc = pc_reef }
				pc_ash = { change_pc = pc_ash }
				pc_primal = { change_pc = pc_primal }
				pc_salt = { change_pc = pc_salt }
				pc_aquifer = { change_pc = pc_aquifer }
				pc_coral = { change_pc = pc_coral }
				pc_storm = { change_pc = pc_storm }
				pc_rogue = { change_pc = pc_rogue }
				pc_lichen = { change_pc = pc_lichen }
				pc_eyeball = { change_pc = pc_eyeball }
				pc_glacio = { change_pc = pc_glacio }
				pc_lanthanide = { change_pc = pc_lanthanide }
				pc_megaflora = { change_pc = pc_megaflora }
				pc_megaflorahive = { change_pc = pc_megaflorahive }
				pc_megafloratol = { change_pc = pc_megafloratol }
				pc_pdhive1 = { change_pc = pc_pdhive1 }
				pc_pdhive2 = { change_pc = pc_pdhive2 }
				pc_aquatic = { change_pc = pc_aquatic }
				pc_pd_barren_hab = { change_pc = pc_pd_barren_hab }
				pc_pd_barren_cold_hab = { change_pc = pc_pd_barren_cold_hab }
				pc_pd_gas_giant_hab = { change_pc = pc_pd_gas_giant_hab }
				pc_pd_molten_hab = { change_pc = pc_pd_molten_hab }
				pc_pd_frozen_hab = { change_pc = pc_pd_frozen_hab }
				pc_pd_toxic_hab = { change_pc = pc_pd_toxic_hab }
				pc_pd_hothouse_hab = { change_pc = pc_pd_hothouse_hab }
				pc_pd_asteroid_hab = { change_pc = pc_pd_asteroid_hab }
				pc_pdshroud = { change_pc = pc_pdshroud }
			}
		}
	}
}