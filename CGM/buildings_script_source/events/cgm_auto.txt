namespace = cgm_auto
 #there are 3*3 types of important variables used in these events:
# "cur_" is always for the tile we are currently in,
# "best_" is previously found best tiles.
# "worst_" is previously found worst tiles -> to be used with special buildings who do not requre special tiles.
#Each can be combined with
# "Type", which is a number assigned to the different weight-type
# "weight", which is the actual weight value
# "Tile", which is the "id" of a tile
country_event = {
	id = cgm_auto.0
	is_triggered_only = yes
	hide_window = yes
	immediate = {
		remove_country_flag = cgm_auto_built
		set_country_flag = display_low_tier_flag #The buildings we create are otherwise probably unavaiable due to direct build. Later removed again.
		set_country_flag = cgm_core_world_auto #searching core worlds for standard buildings
		 #Search for possible Special buildings:
		country_event = { id = cgm_auto.11 }
		 #Search for possible Standard buildings. Build best out of standard/special:
		country_event = { id = cgm_auto.10 }
		if = {
			limit = { not = { has_country_flag = cgm_auto_built } }
			remove_country_flag = cgm_core_world_auto #searching sector worlds for standard buildings
			 #Search for possible Special buildings:
			country_event = { id = cgm_auto.10 }
			 #Search for possible Standard buildings. Build best out of standard/special:
			country_event = { id = cgm_auto.10 }
		}
		if = {
			limit = { NOT = { has_country_flag = do_no_remove_low_tier_flag } }
			remove_country_flag = display_low_tier_flag
		}
	}
}
country_event = {
	id = cgm_auto.10
	is_triggered_only = yes
	hide_window = yes
	immediate = {
		set_variable = { which = cgm_bestWeight_1 value = 0 }
		every_owned_planet = {
			limit = {
				has_building_construction = no
				free_building_tiles > 0
				not = { has_planet_flag = purged_planet }
				OR = {
					AND = {
						sector_controlled = no
						prev = { has_country_flag = cgm_core_world_auto }
					}
					AND = {
						sector_controlled = yes
						not = { prev = { has_country_flag = cgm_core_world_auto } }
					}
				}
				any_pop = {
					is_colony_pop = yes
					NOR = {
						tile = { has_building = yes has_building_construction = yes }
					}
				}
			}
			log = "searching on planet [this.GetName]"
			if = {
				limit = {
					check_variable = { which = cgm_bestWeight_1 value = 0 }
				}
				planet_event = { id = cgm_auto.20 }
			}
			if = {
				limit = {
					check_variable = { which = cgm_bestWeight_1 value > prev }
				}
				save_event_target_as = cgm_best_planet
				prev = {
					set_variable = { which = cgm_bestWeight_1 value = prev }
				}
			}
		}
		log = "bestStandard:[this.cgm_bestWeight_1]"
		log = "bestSpecial:[this.cgm_special_bestWeight]"
		if = {
			limit = {
				check_variable = { which = cgm_bestWeight_1 value > cgm_special_bestWeight }
			}
			event_target:cgm_best_planet = {
				if = {
					limit = {
						check_variable = { which = cgm_bestType_1 value = 1 }
					}
					set_variable = { which = cgm_curTile value = 0 }
					every_tile = {
						prev = {
							change_variable = { which = cgm_curTile value = 1 }
						}
						if = {
							limit = {
								prev = {
									check_variable = { which = cgm_curTile value = cgm_bestTile_1 }
								}
							}
							add_energy_building = yes
						}
					}
				}
				if = {
					limit = {
						check_variable = { which = cgm_bestType_1 value = 2 }
					}
					set_variable = { which = cgm_curTile value = 0 }
					every_tile = {
						prev = {
							change_variable = { which = cgm_curTile value = 1 }
						}
						if = {
							limit = {
								prev = {
									check_variable = { which = cgm_curTile value = cgm_bestTile_1 }
								}
							}
							add_minerals_building = yes
						}
					}
				}
				if = {
					limit = {
						check_variable = { which = cgm_bestType_1 value = 3 }
					}
					set_variable = { which = cgm_curTile value = 0 }
					every_tile = {
						prev = {
							change_variable = { which = cgm_curTile value = 1 }
						}
						if = {
							limit = {
								prev = {
									check_variable = { which = cgm_curTile value = cgm_bestTile_1 }
								}
							}
							add_food_building = yes
						}
					}
				}
				if = {
					limit = {
						check_variable = { which = cgm_bestType_1 value = 4 }
					}
					set_variable = { which = cgm_curTile value = 0 }
					every_tile = {
						prev = {
							change_variable = { which = cgm_curTile value = 1 }
						}
						if = {
							limit = {
								prev = {
									check_variable = { which = cgm_curTile value = cgm_bestTile_1 }
								}
							}
							add_base_res_adjacency_building = yes
						}
					}
				}
				if = {
					limit = {
						check_variable = { which = cgm_bestType_1 value = 5 }
					}
					set_variable = { which = cgm_curTile value = 0 }
					every_tile = {
						prev = {
							change_variable = { which = cgm_curTile value = 1 }
						}
						if = {
							limit = {
								prev = {
									check_variable = { which = cgm_curTile value = cgm_bestTile_1 }
								}
							}
							add_society_research_building = yes
						}
					}
				}
				if = {
					limit = {
						check_variable = { which = cgm_bestType_1 value = 6 }
					}
					set_variable = { which = cgm_curTile value = 0 }
					every_tile = {
						prev = {
							change_variable = { which = cgm_curTile value = 1 }
						}
						if = {
							limit = {
								prev = {
									check_variable = { which = cgm_curTile value = cgm_bestTile_1 }
								}
							}
							add_physics_research_building = yes
						}
					}
				}
				if = {
					limit = {
						check_variable = { which = cgm_bestType_1 value = 7 }
					}
					set_variable = { which = cgm_curTile value = 0 }
					every_tile = {
						prev = {
							change_variable = { which = cgm_curTile value = 1 }
						}
						if = {
							limit = {
								prev = {
									check_variable = { which = cgm_curTile value = cgm_bestTile_1 }
								}
							}
							add_engineering_research_building = yes
						}
					}
				}
				if = {
					limit = {
						check_variable = { which = cgm_bestType_1 value = 8 }
					}
					set_variable = { which = cgm_curTile value = 0 }
					every_tile = {
						prev = {
							change_variable = { which = cgm_curTile value = 1 }
						}
						if = {
							limit = {
								prev = {
									check_variable = { which = cgm_curTile value = cgm_bestTile_1 }
								}
							}
							add_science_adjacency_building = yes
						}
					}
				}
				if = {
					limit = {
						check_variable = { which = cgm_bestWeight_3 value > 0 }
					}
					set_variable = { which = cgm_bestWeight_1 value = cgm_bestWeight_2 }
					set_variable = { which = cgm_bestTile_1 value = cgm_bestTile_2 }
					set_variable = { which = cgm_bestType_1 value = cgm_bestType_2 }
					set_variable = { which = cgm_bestWeight_2 value = cgm_bestWeight_3 }
					set_variable = { which = cgm_bestTile_2 value = cgm_bestTile_3 }
					set_variable = { which = cgm_bestType_2 value = cgm_bestType_3 }
					set_variable = { which = cgm_bestWeight_3 value = 0 }
					else = {
						if = {
							limit = {
								check_variable = { which = cgm_bestWeight_2 value > 0 }
							}
							set_variable = { which = cgm_bestWeight_1 value = cgm_bestWeight_2 }
							set_variable = { which = cgm_bestTile_1 value = cgm_bestTile_2 }
							set_variable = { which = cgm_bestType_1 value = cgm_bestType_2 }
							set_variable = { which = cgm_bestWeight_2 value = 0 }
							else = {
								set_variable = { which = cgm_bestWeight_1 value = 0 }
							}
						}
					}
				}
			}
			else = {
				event_target:cgm_best_planet_for_special = {
					if = {
						limit = {
							check_variable = { which = cgm_worstWeight value = 99999 }
						}
						planet_event = { id = cgm_auto.20 }
					}
					log = "worst tile::[this.cgm_worstTile]"
					set_variable = { which = cgm_curTile value = 0 }
					every_tile = {
						prev = {
							change_variable = { which = cgm_curTile value = 1 }
						}
						if = {
							limit = {
								prev = {
									check_variable = { which = cgm_curTile value = cgm_worstTile }
								}
							}
							cgm_add_special_building = yes
						}
					}
					set_variable = { which = cgm_worstWeight value = 99999 }
				}
			}
		}
	}
}
country_event = {
	id = cgm_auto.11
	is_triggered_only = yes
	hide_window = yes
	immediate = {
		set_variable = { which = cgm_special_bestWeight value = 0 }
		every_owned_planet = {
			limit = {
				has_building_construction = no
				free_building_tiles > 0
				not = { has_planet_flag = purged_planet }
				OR = {
					AND = {
						sector_controlled = no
						prev = { has_country_flag = cgm_core_world_auto }
					}
					AND = {
						sector_controlled = yes
						not = { prev = { has_country_flag = cgm_core_world_auto } }
					}
				}
				any_pop = {
					is_colony_pop = yes
					NOR = {
						tile = { has_building = yes has_building_construction = yes }
					}
				}
			}
			cgm_search_for_special_building = yes
		}
	}
}
planet_event = {
	id = cgm_auto.20
	is_triggered_only = yes
	hide_window = yes
	immediate = {
		set_variable = { which = cgm_curTile value = 0 }
		set_variable = { which = cgm_bestWeight_1 value = 0 }
		set_variable = { which = cgm_bestWeight_2 value = 0 }
		set_variable = { which = cgm_bestWeight_3 value = 0 }
		 #set worst value to very large number, such that any found tile is initially worse
		set_variable = { which = cgm_worstWeight value = 99999 }
		if = {
			limit = {
				NOT = { any_owned_pop = { is_being_purged = no } }
			}
			set_planet_flag = purged_planet
			else = {
				set_variable = { which = energy_mult_planet_base value = 1 }
				set_variable = { which = minerals_mult_planet_base value = 1 }
				set_variable = { which = food_mult_planet_base value = 1 }
				set_variable = { which = unity_mult_planet_base value = 1 }
				set_variable = { which = society_research_mult_planet_base value = 1 }
				set_variable = { which = physics_research_mult_planet_base value = 1 }
				set_variable = { which = engineering_research_mult_planet_base value = 1 }
				check_vanilla_planet_modifiers = yes
				check_planet_modifiers_pe = yes
				check_planet_modifiers_gpm = yes
				check_planet_modifiers_pd = yes
				check_planet_modifiers_am = yes
				check_planet_modifiers_se = yes
				check_planet_modifiers_gse = yes
				set_variable = { which = energy_mult_planet_building value = 0 }
				set_variable = { which = minerals_mult_planet_building value = 0 }
				set_variable = { which = food_mult_planet_building value = 0 }
				set_variable = { which = unity_mult_planet_building value = 0 }
				set_variable = { which = society_research_mult_planet_building value = 0 }
				set_variable = { which = physics_research_mult_planet_building value = 0 }
				set_variable = { which = engineering_research_mult_planet_building value = 0 }
				check_planet_bonus_buildings = yes
				check_planet_bonus_buildings_pe = yes
				check_planet_bonus_buildings_am = yes
				check_planet_bonus_buildings_eutab = yes
				check_planet_bonus_buildings_ag = yes
				set_variable = { which = energy_mult_planet_pop value = 0 }
				set_variable = { which = minerals_mult_planet_pop value = 0 }
				set_variable = { which = food_mult_planet_pop value = 0 }
				set_variable = { which = unity_mult_planet_pop value = 0 }
				set_variable = { which = society_research_mult_planet_pop value = 0 }
				set_variable = { which = physics_research_mult_planet_pop value = 0 }
				set_variable = { which = engineering_research_mult_planet_pop value = 0 }
				calculate_average_pop_multipliers = yes
				set_variable = { which = energy_mult_planet value = energy_mult_planet_base }
				change_variable = { which = energy_mult_planet value = energy_mult_planet_building }
				change_variable = { which = energy_mult_planet value = energy_mult_planet_pop }
				set_variable = { which = minerals_mult_planet value = minerals_mult_planet_base }
				change_variable = { which = minerals_mult_planet value = minerals_mult_planet_building }
				change_variable = { which = minerals_mult_planet value = minerals_mult_planet_pop }
				set_variable = { which = food_mult_planet value = food_mult_planet_base }
				change_variable = { which = food_mult_planet value = food_mult_planet_building }
				change_variable = { which = food_mult_planet value = food_mult_planet_pop }
				set_variable = { which = unity_mult_planet value = unity_mult_planet_base }
				change_variable = { which = unity_mult_planet value = unity_mult_planet_building }
				change_variable = { which = unity_mult_planet value = unity_mult_planet_pop }
				set_variable = { which = society_research_mult_planet value = society_research_mult_planet_base }
				change_variable = { which = society_research_mult_planet value = society_research_mult_planet_building }
				change_variable = { which = society_research_mult_planet value = society_research_mult_planet_pop }
				set_variable = { which = physics_research_mult_planet value = physics_research_mult_planet_base }
				change_variable = { which = physics_research_mult_planet value = physics_research_mult_planet_building }
				change_variable = { which = physics_research_mult_planet value = physics_research_mult_planet_pop }
				set_variable = { which = engineering_research_mult_planet value = engineering_research_mult_planet_base }
				change_variable = { which = engineering_research_mult_planet value = engineering_research_mult_planet_building }
				change_variable = { which = engineering_research_mult_planet value = engineering_research_mult_planet_pop }
				every_tile = {
					prev = {
						change_variable = { which = cgm_curTile value = 1 }
					}
					if = {
						limit = { has_building = no }
						calculate_tile_weight = yes
						prev = {
							multiply_variable = { which = energy_weight value = energy_mult_planet }
							multiply_variable = { which = minerals_weight value = minerals_mult_planet }
							multiply_variable = { which = food_weight value = food_mult_planet }
							multiply_variable = { which = society_research_weight value = society_research_mult_planet }
							multiply_variable = { which = physics_research_weight value = physics_research_mult_planet }
							multiply_variable = { which = engineering_research_weight value = engineering_research_mult_planet }
							if = {
								limit = {
									check_variable = { which = energy_weight value > cgm_curWeight }
									energy_any_building_available = yes
								}
								set_variable = { which = cgm_curWeight value = energy_weight }
								set_variable = { which = cgm_curType value = 1 }
							}
							if = {
								limit = {
									check_variable = { which = minerals_weight value > cgm_curWeight }
									minerals_any_building_available = yes
								}
								set_variable = { which = cgm_curWeight value = minerals_weight }
								set_variable = { which = cgm_curType value = 2 }
							}
							if = {
								limit = {
									check_variable = { which = food_weight value > cgm_curWeight }
									food_any_building_available = yes
								}
								set_variable = { which = cgm_curWeight value = food_weight }
								set_variable = { which = cgm_curType value = 3 }
							}
							if = {
								limit = {
									check_variable = { which = base_res_adjacency_weight value > cgm_curWeight }
									base_res_adjacency_any_building_available = yes
								}
								set_variable = { which = cgm_curWeight value = base_res_adjacency_weight }
								set_variable = { which = cgm_curType value = 4 }
							}
							if = {
								limit = {
									check_variable = { which = society_research_weight value > cgm_curWeight }
									society_research_any_building_available = yes
								}
								set_variable = { which = cgm_curWeight value = society_research_weight }
								set_variable = { which = cgm_curType value = 5 }
							}
							if = {
								limit = {
									check_variable = { which = physics_research_weight value > cgm_curWeight }
									physics_research_any_building_available = yes
								}
								set_variable = { which = cgm_curWeight value = physics_research_weight }
								set_variable = { which = cgm_curType value = 6 }
							}
							if = {
								limit = {
									check_variable = { which = engineering_research_weight value > cgm_curWeight }
									engineering_research_any_building_available = yes
								}
								set_variable = { which = cgm_curWeight value = engineering_research_weight }
								set_variable = { which = cgm_curType value = 7 }
							}
							if = {
								limit = {
									check_variable = { which = science_adjacency_weight value > cgm_curWeight }
									science_adjacency_any_building_available = yes
								}
								set_variable = { which = cgm_curWeight value = science_adjacency_weight }
								set_variable = { which = cgm_curType value = 8 }
							}
							if = {
								limit = {
									check_variable = { which = cgm_curWeight value > cgm_bestWeight_1 }
								}
								if = {
									limit = {
										check_variable = { which = cgm_bestWeight_2 value > 0 }
									}
									set_variable = { which = cgm_bestWeight_3 value = cgm_bestWeight_2 }
									set_variable = { which = cgm_bestTile_3 value = cgm_bestTile_2 }
									set_variable = { which = cgm_bestType_3 value = cgm_bestType_2 }
									set_variable = { which = cgm_bestWeight_2 value = cgm_bestWeight_1 }
									set_variable = { which = cgm_bestTile_2 value = cgm_bestTile_1 }
									set_variable = { which = cgm_bestType_2 value = cgm_bestType_1 }
									else = {
										if = {
											limit = {
												check_variable = { which = cgm_bestWeight_1 value > 0 }
											}
											set_variable = { which = cgm_bestWeight_2 value = cgm_bestWeight_1 }
											set_variable = { which = cgm_bestTile_2 value = cgm_bestTile_1 }
											set_variable = { which = cgm_bestType_2 value = cgm_bestType_1 }
										}
									}
								}
								set_variable = { which = cgm_bestWeight_1 value = cgm_curWeight }
								set_variable = { which = cgm_bestTile_1 value = cgm_curTile }
								set_variable = { which = cgm_bestType_1 value = cgm_curType }
								else = {
									if = {
										limit = {
											check_variable = { which = cgm_curWeight value > cgm_bestWeight_2 }
										}
										if = {
											limit = {
												check_variable = { which = cgm_bestWeight_2 value > 0 }
											}
											set_variable = { which = cgm_bestWeight_3 value = cgm_bestWeight_2 }
											set_variable = { which = cgm_bestTile_3 value = cgm_bestTile_2 }
											set_variable = { which = cgm_bestType_3 value = cgm_bestType_2 }
										}
										set_variable = { which = cgm_bestWeight_2 value = cgm_curWeight }
										set_variable = { which = cgm_bestTile_2 value = cgm_curTile }
										set_variable = { which = cgm_bestType_2 value = cgm_curType }
										else = {
											if = {
												limit = {
													check_variable = { which = cgm_curWeight value > cgm_bestWeight_3 }
												}
												set_variable = { which = cgm_bestWeight_3 value = cgm_curWeight }
												set_variable = { which = cgm_bestTile_3 value = cgm_curTile }
												set_variable = { which = cgm_bestType_3 value = cgm_curType }
											}
										}
									}
								}
							}
							if = {
								limit = {
									check_variable = { which = cgm_curWeight value < cgm_worstWeight }
								}
								set_variable = { which = cgm_worstWeight value = cgm_curWeight }
								set_variable = { which = cgm_worstTile value = cgm_curTile }
							}
							set_variable = { which = cgm_curWeight value = 0 }
							set_variable = { which = energy_weight value = 0 }
							set_variable = { which = minerals_weight value = 0 }
							set_variable = { which = food_weight value = 0 }
							set_variable = { which = base_res_adjacency_weight value = 0 }
							set_variable = { which = society_research_weight value = 0 }
							set_variable = { which = physics_research_weight value = 0 }
							set_variable = { which = engineering_research_weight value = 0 }
							set_variable = { which = science_adjacency_weight value = 0 }
						}
					}
				}
			}
		}
	}
}
country_event = {
	id = cgm_auto.30
	is_triggered_only = yes
	hide_window = yes
	immediate = {
		determine_surplus_energy = yes
		determine_surplus_minerals = yes
		determine_surplus_food = yes
		determine_surplus_unity = yes
		determine_surplus_society_research = yes
		determine_surplus_physics_research = yes
		determine_surplus_engineering_research = yes
		check_income = yes
		set_variable = { which = energy_country_weight value = 1 }
		set_variable = { which = minerals_country_weight value = 1 }
		set_variable = { which = food_country_weight value = 1 }
		set_variable = { which = unity_country_weight value = 1 }
		set_variable = { which = society_research_country_weight value = 1 }
		set_variable = { which = physics_research_country_weight value = 1 }
		set_variable = { which = engineering_research_country_weight value = 1 }
		 #First negative part test:
		 #MINERALS CHECK NEGATIVE
		if = {
			limit = {
				check_variable = { which = minerals_income value < 0 }
			}
			set_variable = { which = cgm_tmp value = minerals_income }
			multiply_variable = { which = cgm_tmp value = -1 }
			set_variable = { which = cgm_months_to_starvation value = minerals_reserve }
			divide_variable = { which = cgm_months_to_starvation value = minerals_income }
			if = {
				limit = {
					check_variable = { which = cgm_months_to_starvation value < 2 }
				}
				change_variable = { which = minerals_country_weight value = 100 }
				else = {
					set_variable = { which = cgm_tmp value = 100 }
					divide_variable = { which = cgm_tmp value = cgm_months_to_starvation }
					change_variable = { which = minerals_country_weight value = cgm_tmp }
				}
			}
		}
		 #ENERGY CHECK NEGATIVE
		if = {
			limit = {
				check_variable = { which = energy_income value < 0 }
			}
			set_variable = { which = cgm_tmp value = energy_income }
			multiply_variable = { which = cgm_tmp value = -1 }
			set_variable = { which = cgm_months_to_starvation value = energy_reserve }
			divide_variable = { which = cgm_months_to_starvation value = energy_income }
			if = {
				limit = {
					check_variable = { which = cgm_months_to_starvation value < 2 }
				}
				change_variable = { which = energy_country_weight value = 100 }
				else = {
					set_variable = { which = cgm_tmp value = 100 }
					divide_variable = { which = cgm_tmp value = cgm_months_to_starvation }
					change_variable = { which = energy_country_weight value = cgm_tmp }
				}
			}
		}
		 #FOOD CHECK NEGATIVE
		if = {
			limit = {
				check_variable = { which = food_income value < 0 }
			}
			set_variable = { which = cgm_tmp value = food_income }
			multiply_variable = { which = cgm_tmp value = -1 }
			set_variable = { which = cgm_months_to_starvation value = food_reserve }
			divide_variable = { which = cgm_months_to_starvation value = food_income }
			if = {
				limit = {
					check_variable = { which = cgm_months_to_starvation value < 2 }
				}
				change_variable = { which = food_country_weight value = 100 }
				else = {
					set_variable = { which = cgm_tmp value = 100 }
					divide_variable = { which = cgm_tmp value = cgm_months_to_starvation }
					change_variable = { which = food_country_weight value = cgm_tmp }
				}
			}
		}
		if = {
			limit = {
				NOR = {
					check_variable = { which = minerals_income value < 0 }
					check_variable = { which = energy_income value < 0 }
					check_variable = { which = food_income value < 0 }
				}
			}
			 #All positive weightings:
			 #ENERGY
			multiply_variable = { which = energy_country_weight value = minerals_log }
			set_variable = { which = cgm_tmp value = energy_log }
			change_variable = { which = cgm_tmp value = 2.0 }
			divide_variable = { which = energy_country_weight value = cgm_tmp }
			if = {
				limit = {
					check_variable = { which = energy_country_weight value > 2 }
				}
				set_variable = { which = energy_country_weight value = 2 }
			}
			 #FOOD
			multiply_variable = { which = food_country_weight value = minerals_log }
			set_variable = { which = cgm_tmp value = food_log }
			change_variable = { which = cgm_tmp value = 2.0 }
			divide_variable = { which = food_country_weight value = cgm_tmp }
			if = {
				limit = {
					check_variable = { which = food_country_weight value > 2 }
				}
				set_variable = { which = food_country_weight value = 2 }
			}
			 #UNITY
			multiply_variable = { which = unity_country_weight value = minerals_log }
			set_variable = { which = cgm_tmp value = unity_log }
			change_variable = { which = cgm_tmp value = 2.0 }
			divide_variable = { which = unity_country_weight value = cgm_tmp }
			if = {
				limit = {
					check_variable = { which = unity_country_weight value > 2 }
				}
				set_variable = { which = unity_country_weight value = 2 }
			}
			 #SOCIETY_RESEARCH
			multiply_variable = { which = society_research_country_weight value = minerals_log }
			set_variable = { which = cgm_tmp value = society_research_log }
			change_variable = { which = cgm_tmp value = 1.0 }
			divide_variable = { which = society_research_country_weight value = cgm_tmp }
			if = {
				limit = {
					check_variable = { which = society_research_country_weight value > 2 }
				}
				set_variable = { which = society_research_country_weight value = 2 }
			}
			 #PHYSICS_RESEARCH
			multiply_variable = { which = physics_research_country_weight value = minerals_log }
			set_variable = { which = cgm_tmp value = physics_research_log }
			change_variable = { which = cgm_tmp value = 1.0 }
			divide_variable = { which = physics_research_country_weight value = cgm_tmp }
			if = {
				limit = {
					check_variable = { which = physics_research_country_weight value > 2 }
				}
				set_variable = { which = physics_research_country_weight value = 2 }
			}
			 #ENGINEERING_RESEARCH
			multiply_variable = { which = engineering_research_country_weight value = minerals_log }
			set_variable = { which = cgm_tmp value = engineering_research_log }
			change_variable = { which = cgm_tmp value = 1.0 }
			divide_variable = { which = engineering_research_country_weight value = cgm_tmp }
			if = {
				limit = {
					check_variable = { which = engineering_research_country_weight value > 2 }
				}
				set_variable = { which = engineering_research_country_weight value = 2 }
			}
		}
	}
}
