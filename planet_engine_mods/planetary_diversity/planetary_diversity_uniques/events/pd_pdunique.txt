namespace = pdunqiue

event = {
	id = pdunqiue.00
	hide_window = yes
	is_triggered_only = yes
	fire_only_once = yes
	immediate = { set_global_flag = planetarydiversityuniques }
}


country_event = {
	id = pdunqiue.10
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		exists = capital_scope
		capital_scope = {
			is_pd_unique = yes
		}
	}
	
	immediate = {
		capital_scope = {
			generate_pd_unique_start_deposits_and_blockers = yes
		}
	}
}

planet_event = {
	id = pdunqiue.11
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		exists = owner
		owner = {
			OR = {
				has_origin = origin_floating_world
				has_origin = origin_crystal_world 
				has_origin = origin_graveyard_world 
				has_origin = origin_techno_world 
			}	
		}
	}
	immediate = { pd_unique_generate_start_pops = yes }
}

# Pop creation event for techno Army's Ancient Cloning Vats
country_event = {
	id = pdunqiue.01
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_origin = origin_techno_world
	}

	immediate = {
		every_owned_planet = {
			limit = {
				is_colony = yes
				is_under_colonization = no
			}

			# Figure out how many (not disabled) VATS the planet has.
			export_trigger_value_to_variable = {
				trigger = num_buildings
				parameters = {
					type = building_techno_04_clone_vat
					disabled = no
				}
				variable = num_techno_vats
			}

			# Figure out techno Army Population (only OWN species are compatible, not imported ones)
			set_variable = { which = num_techno_pops value = 0 }
			every_owned_pop = {
				limit = {
					owner_main_species = { is_same_species = prev }
					has_trait = trait_organic_fourschildren
				}
				prev = { change_variable = { which = num_techno_pops value = 1 } }
			}

			### Variable 'techno_pops_missing' read by 'should_force_decline_species' and must be updated.
			### techno_pops_missing = (20 * num_techno_vats) - num_techno_pops
			set_variable = { which = techno_pops_missing value = 30 }
			multiply_variable = { which = techno_pops_missing value = num_techno_vats }
			subtract_variable = { which = techno_pops_missing value = num_techno_pops }

			### Override it to -1 if there are no pops on the planet, but the planet could not sustain them
			### Only applies after colonization. Prevents pops from auto-migrating and immediately being purged
			if = {
				limit = {
					check_variable = { which = num_techno_pops value = 0 }
					check_variable = { which = num_techno_vats value = 0 }
				}
				set_variable = { which = techno_pops_missing value = -1 }
			}

			### Variable 'techno_pops_missing_per_vat' is read by 'building_techno_army_clone_vat' and must be updated.
			set_variable = { which = techno_pops_missing_per_vat value = 0 }

			# Always remove modifier. Reapply further down if still needed.
			remove_modifier = modifier_techno_pops_decline

			if = {
				limit = {
					check_variable = { which = techno_pops_missing value > 0 }
				}

				### Growing.
				### techno_pops_missing_per_vat = techno_pops_missing / num_techno_vats, don't divide by 0.
				set_variable = { which = techno_pops_missing_per_vat value = techno_pops_missing }
				divide_variable = { which = techno_pops_missing_per_vat value = num_techno_vats }
			}
			else_if = {
				limit = {
					check_variable = { which = techno_pops_missing value = 0 }
				}
				### Pop stable.
			}
			else_if = {
				limit = { ### No need to set modifier if no declining pops present
					check_variable = { which = num_techno_pops value > 0 }
					OR = {
						NOT = { exists = declining_species }
						declining_species = { is_same_species = root }
					}
				}
				### Pop above max, should decline. Variable 'techno_pops_missing' is negative:
				### techno_pops_decline_factor = ( 4 % per month - techno_pops_missing ) / BASE_POP_DECLINE
				set_variable = { which = techno_pops_decline_factor value = 4 }
				subtract_variable = { which = techno_pops_decline_factor value = techno_pops_missing }
				divide_variable = { which = techno_pops_decline_factor value = 5 }	# 5 should match BASE_POP_DECLINE.
				subtract_variable = { which = techno_pops_decline_factor value = 1 }	# Subtract base decline.

				add_modifier = {
					modifier = modifier_techno_pops_decline
					multiplier = techno_pops_decline_factor
					clear_on_owner_change = yes
				}
			}

			# Debug growth/decline.
			#log = "technos on '[This.GetName]'. techno_pops_missing is: [This.techno_pops_missing], techno_pops_missing_per_vat: [This.techno_pops_missing_per_vat], techno_pops_decline_factor: [This.techno_pops_decline_factor]"
		}
	}
}



#Destory Double Unique Worlds and set flags
country_event = {
	id = pdunique.12
	hide_window = yes
	is_triggered_only = yes

   	immediate = {
		if = { limit = { any_country = { has_origin = origin_floating_world } }
        every_galaxy_planet = {
            if = {
                limit = { solar_system = { has_star_flag = floating_system } is_planet_class = pc_floating }
					change_pc = pc_broken
					remove_planet_flag = floating_planet
					remove_planet_flag = pdfloating
					remove_modifier = floating
					remove_deposit = d_eludium_islands
					set_deposit = d_volatile_motes_5
				}
			}
		every_system = {
			remove_star_flag = floating_system
			} 
		}
		if = { limit = { any_country = { has_origin = origin_crystal_world } }
        every_galaxy_planet = {
            if = {
                limit = { solar_system = { has_star_flag = pdcrystal_system } is_planet_class = pc_crystal }
					change_pc = pc_broken
					remove_planet_flag = crystal_planet
					remove_planet_flag = pdcrystal
					remove_modifier = crystal
					remove_deposit = d_crystal_guild
					set_deposit = d_rare_crystals_5
				}
			}
		every_system = {
			remove_star_flag = pdcrystal_system
			} 
		}
		if = { limit = { any_country = { has_origin = origin_graveyard_world } }
        every_galaxy_planet = {
            if = {
                limit = { solar_system = { has_star_flag = graveyard_system } is_planet_class = pc_graveyard }
					change_pc = pc_broken
					remove_planet_flag = graveyard_planet
					remove_planet_flag = pdgraveyard
					remove_modifier = graveyard
					remove_deposit = d_graveyard_well
					set_deposit = d_exotic_gases_5
				}
			}
		every_system = {
			remove_star_flag = graveyard_system
			} 
		}
		if = { limit = { any_country = { has_origin = origin_techno_world } }
        every_galaxy_planet = {
            if = {
                limit = { solar_system = { has_star_flag = technoorganic_system } is_planet_class = pc_technoorganic }
					change_pc = pc_broken
					remove_planet_flag = technoorganic_planet
					remove_planet_flag = pdtechnoorganic
					remove_modifier = technoorganic
					remove_deposit = d_subsurface_assembly
					set_deposit = d_living_metal_deposit
				}
			}
		every_system = {
			remove_star_flag = technoorganic_system
			} 
		}
		if = { limit = { any_country = { has_origin = origin_archive_world } }
        every_galaxy_planet = {
            if = {
                limit = { solar_system = { has_star_flag = archive_system_notorigin } is_planet_class = pc_archive }
					change_pc = pc_broken
					remove_planet_flag = archive_planet
					remove_planet_flag = pdarchive
					remove_modifier = archive
					set_deposit = d_physics_10
				}
			}
		every_system = {
			remove_star_flag = archive_system_notorigin
			} 
		}
		if = { limit = { any_country = { has_origin = origin_crucible_world } }
        every_galaxy_planet = {
            if = {
                limit = { solar_system = { has_star_flag = crucible_notorigin } is_planet_class = pc_shielded has_planet_flag = pd_crucible_homeplanet }
				change_pc = pc_broken
				remove_planet_flag = pd_crucible_homeplanet
				remove_modifier = crucible_homeplanet
			}
		}
        every_galaxy_planet = {
            if = {
                limit = { solar_system = { has_star_flag = crucible_notorigin } is_planet_class = pc_shielded has_planet_flag = pd_crucible_planet }
				change_pc = pc_broken
				remove_planet_flag = pd_crucible_planet
				remove_modifier = crucible_shieldedplanet
				add_deposit = d_physics_10
				add_deposit = d_zro_deposit_1
			}
		}
        every_galaxy_planet = {
            if = {
                limit = { solar_system = { has_star_flag = crucible_notorigin } is_planet_class = pc_broken has_planet_flag = pd_crucible_military_moon }
				change_pc = pc_broken
				remove_planet_flag = pd_crucible_military_moon
				remove_modifier = crucible_military_moon
			}
		}
		every_system = {
			IF = {
				limit = { has_star_flag = crucible_notorigin }
				remove_star_flag = crucible_notorigin
				remove_star_flag = crucible_system
				}
			} 
		}

		every_galaxy_planet = {
			limit = { is_planet_class = pc_floating }
			set_planet_flag = pdfloating
		}
		every_galaxy_planet = {
			limit = { is_planet_class = pc_crystal }
			set_planet_flag = pdcrystal
		}
		every_galaxy_planet = {
			limit = { is_planet_class = pc_graveyard }
				set_planet_flag = pdgraveyard
		}
		every_galaxy_planet = {
			limit = { is_planet_class = pc_technoorganic }
			set_planet_flag = pdtechnoorganic
		}
		every_galaxy_planet = {
			limit = { is_planet_class = pc_archive }
			set_planet_flag = pdarchive
		}
	}
}



# Check Planet Class for Deposits + Modifiers
planet_event = {
	id = pdunique.13
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = { 
		limit = { NOT = { is_planet_class = pc_floating } }
		remove_deposit = d_eludium_islands
		remove_modifier = floating
		remove_building = building_eludium_mine
		}
		if = { 
		limit = { NOT = { is_planet_class = pc_graveyard } }
		remove_deposit = d_graveyard_well
		remove_modifier = graveyard
		remove_building = building_graveyard_well
		}
		if = { 
		limit = { NOT = { is_planet_class = pc_crystal } }
		remove_deposit = d_crystal_guild
		remove_modifier = crystal
		remove_building = building_crystal_carver
		}
		if = { 
		limit = { NOT = { is_planet_class = pc_technoorganic } }
		remove_deposit = d_subsurface_assembly
		remove_modifier = technoorganic
		remove_building = building_subsurface_assembly
		}
	}
}