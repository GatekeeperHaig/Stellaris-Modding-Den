namespace = game_start

### Hidden Game Start Event
event = {
	id = game_start.1
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		set_global_flag = game_started

		every_country = {
			limit = { is_ai = no }
			country_event = { id = country.900 days = 460 random = 60 }
		}
		
		### SPAWN UNIQUE SYSTEMS
		# If any Empire is Commonwealth and UN is unplayed
		if = {
			limit = {
				any_country = { has_country_flag = human_2 }
				NOT = { any_system = { has_star_flag = sol } }
			}
			random_system = {
				limit = { has_star_flag = aldebaran_system }
				spawn_system = {
					initializer = "com_sol_system"
					min_distance = 80
					max_distance = 150
				}
				
			}
			random_system = {
				limit = { has_star_flag = com_sol }
				spawn_system = {
					initializer = "mp_alpha_centauri"
					min_distance = 10
					max_distance = 20
				}
				spawn_system = {
					initializer = "mp_sirius"
					min_distance = 10
					max_distance = 20
				}
				spawn_system = {
					initializer = "mp_epsilon_eridani_habitable"
					min_distance = 15
					max_distance = 30
				}
				spawn_system = {
					initializer = "mp_procyon_random"
					min_distance = 15
					max_distance = 30
				}
				spawn_system = {
					initializer = "mp_epsilon_indi"
					min_distance = 20
					max_distance = 40
				}
				spawn_system = {
					initializer = "mp_tau_ceti"
					min_distance = 20
					max_distance = 40
				}
				spawn_system = {
					initializer = "mp_altair"
					min_distance = 20
					max_distance = 40
				}
				spawn_system = {
					initializer = "mp_eta_cassiopeiae"
					min_distance = 20
					max_distance = 40
				}
				spawn_system = {
					initializer = "mp_delta_pavonis"
					min_distance = 20
					max_distance = 40
				}
				spawn_system = {
					initializer = "mp_beta_hydri"
					min_distance = 20
					max_distance = 40
				}
				spawn_system = {
					initializer = "mp_vega"
					min_distance = 20
					max_distance = 40
				}
				spawn_system = {
					initializer = "mp_formalhaut"
					min_distance = 20
					max_distance = 40
				}
				spawn_system = {
					initializer = "mp_pollux"
					min_distance = 30
					max_distance = 60
				}
				spawn_system = {
					initializer = "mp_denebola"
					min_distance = 30
					max_distance = 60
				}
				spawn_system = {
					initializer = "mp_arcturus"
					min_distance = 30
					max_distance = 60
				}
				spawn_system = {
					initializer = "mp_zeta_reticuli"
					min_distance = 30
					max_distance = 60
				}
				
				
			}
		}
		# If the opposite, any Empire is UN and Commonwealth is unplayed
		else_if = {			
			limit = {
				any_country = { has_country_flag = human_1 }
				NOT = { any_system = { has_star_flag = aldebaran_system } }
			}
			random_system = {
				limit = { has_star_flag = sol }
				spawn_system = {
					initializer = "une_aldebaran_system"
					min_distance = 80
					max_distance = 150
				}
				
			}
		}

		### SPAWN INVISIBLE GLOBAL EVENT COUNTRY
		create_country = {
			name = "global_event_country"
			type = global_event
			effect = {
				save_global_event_target_as = global_event_country
			}
		}

		### SPAWN SPECIAL COUNTRIES
		create_country = {
			name = "NAME_The_Shroud"
			type = shroud
			flag = {
				icon = {
					category = "special"
					file = "the_shroud.dds"
				}
				background= {
					category = "backgrounds"
					file = "00_solid.dds"
				}
				colors={
					"red"
					"black"
					"null"
					"null"
				}
			}
		}
		
		### HANDLE EMPIRE RELATIONS
		every_country = {
			limit = {
				has_country_flag = fallen_empire_machine
			}
			every_country = {
				limit = {
					is_country_type = drone
				}
				set_faction_hostility = {
					target = prev
					set_hostile = no
					set_neutral = no
					set_friendly = yes
				}					
			}
		}
		
		every_country = {
			limit = {
				is_country_type = tiyanki
			}
			every_country = {
				limit = {
					OR = {
						is_country_type = amoeba
						is_country_type = crystal
						is_country_type = cloud
					}				
				}
				set_faction_hostility = {
					target = prev
					set_hostile = no
					set_neutral = yes
					set_friendly = no
				}					
			}
		}	

		### MARAUDER FLAGS
		every_country = {
			limit = { is_country_type = dormant_marauders }
			randomize_flag_symbol = "pirate"
		}

		### MARAUDERS SHOULD NOT ATTACK ENCLAVES
		every_country = {
			limit = { is_country_type = enclave }
			every_country = {
				limit = { is_country_type = dormant_marauders }
				set_faction_hostility = {
					target = prev
					set_hostile = no
					set_neutral = no
					set_friendly = yes
				}
			}
		}		
	}
}

### Country-scope start event for advanced empires
country_event = {
	id = game_start.6
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		give_technology = { tech = "tech_society_1" message = no }
		give_technology = { tech = "tech_engineering_1" message = no }
		give_technology = { tech = "tech_physics_1" message = no }
		give_technology = { tech = "tech_planetary_unification" message = no }
		
		add_resource = { energy = 1000	}
		add_resource = { minerals = 1000 }
		add_resource = { alloys = 500	}
		add_resource = { influence = 200 }		
		if = {
			limit = { is_machine_empire = no }
			add_resource = { food = 1000 }		
		}
		if = {
			limit = { is_gestalt = no }
			add_resource = { consumer_goods = 500 }		
		}
		
		every_planet_within_border = {
			limit = { 
				has_deposit_for = shipclass_mining_station
				has_mining_station = no
			}
			create_mining_station = {
				owner = ROOT
			}
		}
		every_planet_within_border = {
			limit = { 
				has_deposit_for = shipclass_research_station 
				has_research_station = no
			}
			create_research_station = {
				owner = ROOT
			}
		}		
		every_system_within_border = {
			set_star_flag = advanced_empire_space
		}
	}
}

### Create wormhole pairs
event = {
	id = game_start.31
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		get_galaxy_setup_value = { 
			setting = num_wormhole_pairs
			which = local_wormholes_num
			scale_by = 10 # Was 5 in vanilla, but want more wormholes with shorter distances
		}
		while = {
			count = local_wormholes_num
			random_system = {
				limit = {
					NOR = {
						has_natural_wormhole = yes
						starting_system = yes
						has_star_flag = sirius
						has_star_flag = aldebaran_system
						has_star_flag = abandoned_gateway
					}
					OR = {
						solar_system = { any_system_planet = { is_planet_class_pc_f_star = yes } } # System has a White Dwarf
						solar_system = { any_system_planet = { is_planet_class_pc_m_giant_star = yes } } # System has a Red Giant
						solar_system = { any_system_planet = { is_planet_class_pc_k_star = yes } } # System has a Red Supergiant
						solar_system = { any_system_planet = { is_planet_class_pc_black_hole = yes } } # System has a Black Hole
						solar_system = { any_system_planet = { is_planet_class_pc_neutron_star = yes } } # System has a Neutron Star
						solar_system = { any_system_planet = { is_planet_class_pc_pulsar = yes } } # System has a Pulsar
					}
				}
				random_system = {
					limit = {
						NOR = {
							has_natural_wormhole = yes
							starting_system = yes
							has_star_flag = empire_cluster
							has_star_flag = sirius
							has_star_flag = aldebaran_system
							has_star_flag = abandoned_gateway
						}
						OR = {
							solar_system = { any_system_planet = { is_planet_class_pc_black_hole = yes } } # Target has a Black Hole
							solar_system = { any_system_planet = { is_planet_class_pc_neutron_star = yes } } # Target has a Neutron Star
							solar_system = { any_system_planet = { is_planet_class_pc_pulsar = yes } } # Target has a Pulsar
							solar_system = { any_system_planet = { is_planet_class_pc_f_star = yes } } # Target has a White Dwarf
							solar_system = { any_system_planet = { is_planet_class_pc_m_giant_star = yes } } # Target has a Red Giant
							solar_system = { any_system_planet = { is_planet_class_pc_k_star = yes } } # Target has a Red Supergiant
						}
						distance = {
							source = prev
							min_distance >= 150 # Was 500 in vanilla, but want more wormholes with shorter distances
							max_distance <= 300
						}
					}
					prev = { # done this way to ensure we don't spawn "orphan" wormholes (wormholes that aren't linked to anything)
							spawn_natural_wormhole = {
							bypass_type = wormhole
							random_pos = yes
							orbit_angle = 360
						}
					}
					spawn_natural_wormhole = {
						bypass_type = wormhole
						random_pos = yes
						orbit_angle = 360
					}
					link_wormholes = prev
				}
			}
		}
	}
}