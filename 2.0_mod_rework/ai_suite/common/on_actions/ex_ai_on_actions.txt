# No scope, like on_game_start
on_monthly_pulse = {
	events = {

	}
}

# No scope, like on_game_start
on_yearly_pulse = {
	events = {
	}
}

# No scope, like on_game_start
on_five_year_pulse = {
	events = {

	}
}

# No scope, like on_game_start
on_decade_pulse = {
	events = {

	}
}

# Triggers when the game starts
on_game_start = {
	events = {

	}
}

on_game_start_country = {
	events = {

	}
}

# Triggers when pressing begin in the intro window
# This = country to press begin
on_press_begin = {
	events = {

	}
}

# A planet has been colonized.
# Scope = Planet
on_colonized = {
	events = {

	}
}

# A colony has been destroyed. Called just before owner and controller is cleared
# Scope = Planet
on_colony_destroyed = {
	events = {

	}
}

# Triggers when a Special Project to uplift a pre-sapient species is completed.
# Note that this will trigger once for each combination of planet & original
# species (but for uplifting this should be only once).
#
# Scope = planet_event
# This = planet scope
# From = uplifted species (pre-modification)
on_uplift_completion = {
	events = {

	}
}

# This = Planet scope
# From = Country
# FromFrom = Pop
on_purge_complete = {
	events = {

	}
}

# This = Pop scope
# From = Planet
on_purge_begun = {
	events = {
	}
}

# This = Pop scope
# From = Planet
on_purge_canceled = {
}

# Planet has been terraformed
# This = Planet
# From = Terraformer
on_terraforming_complete = {
	events = {

	}
}

# Pop is enslaved
# This = Pop scope
# owner_species = { (species)
# owner = { owner_species = { (empire main species)
# owner = { (empire)
on_pop_enslaved = {
	events = {
	}
}

# Pop is released from slavery
# This = Pop scope
# owner_species = { (species)
# owner = { owner_species = { (empire main species)
# owner = { (empire)
on_pop_emancipated = {
	events = {
	}
}

# From = Tile
# This = Planet
on_blocker_cleared = {
	events = {

	}
}

# Executes after a policy has been changed
# use last_changed_policy to identify which policy it was
# This = Country
on_policy_changed = {
	events = {

	}
}

# Triggers when a Special Project to apply a species modification template has completed.
# Note that this will trigger once for each combination of planet & original species.
#
# This = Country
# From = Species ( Post Modification )
on_modification_complete = {
	events = {
	}
}

#A building construction has been completed.
# This = Planet
# From = Tile
on_building_complete = {
	events = {
	}
}

# A building construction has been queued.
# This = Planet
# From = Tile
on_building_queued = {
	events = {
	}
}

# A building construction has been unqueued.
# This = Planet
# From = Tile
on_building_unqueued = {
	events = {
	}
}

# A building construction has been completed, which is an upgrade of previous building.
# This = Planet
# From = Tile
on_building_upgraded = {
	events = {
	}
}

# A building construction has demolished.
# This = Planet
# From = Tile
on_building_demolished = {
	events = {
	}
}

# A building construction has finished, replacing another building.
# This = Planet
# From = Tile
on_building_replaced = {
	events = {
	}
}

# A tile building has been ruined
# This = Planet
# From = Tile
on_building_ruined = {
	events = {
	}
}

# A tile building has been repaired
# This = Planet
# From = Tile
on_building_repaired = {
	events = {
	}
}

# A pop has finished migrating to another planet
# Root = pop
# From = Tile on the new planet
# FromFrom = Tile on the old planet
on_pop_migration_end = {
	events = {
	}
}

# A pop has been moved to another tile
# Root = pop
# From = previous tile
on_pop_moved = {
	events = {

	}
}

# A pop has been resettled to another planet
# Root = pop
# From = Tile on the old planet
on_pop_resettled = {
	events = {
	}
}

# We changed a species right
# This = pop
on_pop_rights_change = {
	events = {
	}
}

# A pop has been built
# This = pop
on_buildable_pop_created = {
	events = {
	}
}
# A pop has become fully grown
# This = pop
on_pop_fully_grown = {
	events = {
	}
}

#From = Country scope
#This = Planet scope
on_planet_ownerless = {
	events = {
	}
}

#Fired whenever a new owner is set for a planet,
#be it after a war or through a trade
#From = Country scope (new owner)
#This = Planet scope
on_planet_transfer = {
	events = {
	}
}