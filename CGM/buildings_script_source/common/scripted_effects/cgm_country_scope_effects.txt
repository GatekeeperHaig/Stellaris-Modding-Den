### Effects in this file are ran on country scope.
check_income = {
	if = {
		limit = {
			#NOT = {has_country_flag = ignore_next_check}#maybe we need this some day
			has_global_flag = cgm_first_month_passed
			#has_monthly_income gives false results during the first month after game start
		}
		#log = "Check started"
		
		
		###FOOD###
		#update food_reserve, food_income, positive_food_reserve_month variables
		#set/remove is_food_starved
		#modify food_weight(country)
		if = { 
			limit = { 
				OR = {
					is_machine_empire = no #machines don't like BANANAS!
					is_servitor = yes
				}
			}	
			
			#update reserve_month variable and remove starved flag
			if = {
				limit = { 
					food > 0
					has_monthly_income = { resource = food value > 0 }
				}			
				if = { 
					limit = { check_variable = { which = positive_food_reserve_month value > 0 } }
					change_variable = { which = positive_food_reserve_month value = 1 }
					else = { set_variable = { which = positive_food_reserve_month value = 1 } }
				}			
				remove_country_flag = is_food_starved
			}
			
			
			#count full reserve and income
			set_variable = { which = food_reserve value = 0 }		
			set_variable = { which = food_income value = 0 }
			set_variable = { which = reserve_transport value = 0 }
			count_food_reserve = yes #ignores decimal places 			
			restore_food_reserve = yes
			determine_food_income = yes
			
			
			#modify weight(country) and set starved flag
			if = { 
				limit = {food < 0.001}#limit = {NOT = {food > 0}}
				set_variable = { which = positive_food_reserve_month value = 0 } 
				set_country_flag = is_food_starved
			}
			if = {
				limit = {has_monthly_income = { resource = food value < 5 }}
				change_variable = { which = food_weight value = 3 }
				if = { 
					limit = { 
						has_monthly_income = { resource = food value < 1 }
						OR = { 
							food < 1
							any_owned_planet = { 
								has_modifier = starvation
								has_orbital_bombardment = no
								has_ground_combat = no
								is_occupied_flag = no
							}	
						}							
					}	
					set_country_flag = is_food_starved
					change_variable = { which = food_weight value = 10 }
				}	
				if = {
					limit = { has_monthly_income = { resource = food value < -10 } }
					change_variable = { which = food_weight value = 4 }
				}
				if = {
					limit = { has_monthly_income = { resource = food value < -20 } }
					change_variable = { which = food_weight value = 5 }
				}
			}
		}

		
		
		###ENERGY###
		#update energy_reserve, energy_income, positive_energy_reserve_month variables
		#set/remove is_energy_starved
		#modify energy_weight(country)
		
		
		#update reserve_month variable and remove starved flag
		if = {
			limit = { 
				energy > 0
				has_monthly_income = { resource = energy value > 0 }
			}			
			if = { 
				limit = { check_variable = { which = positive_energy_reserve_month value > 0 } }
				change_variable = { which = positive_energy_reserve_month value = 1 }
				else = { set_variable = { which = positive_energy_reserve_month value = 1 } }
			}			
			remove_country_flag = is_energy_starved
		}
		
		
		#count full reserve and income
		set_variable = { which = energy_reserve value = 0 }		
		set_variable = { which = energy_income value = 0 }
		set_variable = { which = reserve_transport value = 0 }
		count_energy_reserve = yes #ignores decimal places 		
		restore_energy_reserve = yes
		determine_energy_income = yes		
		
		#modify weight(country) and set starved flag
		if = { 
			limit = {energy < 0.001}
			set_variable = { which = positive_energy_reserve_month value = 0 } 
			set_country_flag = is_energy_starved
		}
		if = {
			limit = {has_monthly_income = { resource = energy value < 5 }}
			change_variable = { which = energy_weight value = 3 }
			if = { 
				limit = { 
					has_monthly_income = { resource = energy value < 1 }
					OR = { 
						energy < 1
						has_modifier = energy_deficit
					}							
				}	
				set_country_flag = is_energy_starved
				change_variable = { which = energy_weight value = 10 }
			}	
			if = {
				limit = { has_monthly_income = { resource = food value < -10 } }
				change_variable = { which = energy_weight value = 4 }
			}
			if = {
				limit = { has_monthly_income = { resource = food value < -20 } }
				change_variable = { which = energy_weight value = 5 }
			}
		}
		
		
		
		###MINERALS###
		#update minerals_reserve, minerals_income, positive_minerals_reserve_month variables
		#set/remove is_minerals_starved
		#modify minerals_weight(country)
		
		
		#update reserve_month variable and remove starved flag
		if = {
			limit = { 
				minerals > 0
				has_monthly_income = { resource = minerals value > 0 }
			}			
			if = { 
				limit = { check_variable = { which = positive_minerals_reserve_month value > 0 } }
				change_variable = { which = positive_minerals_reserve_month value = 1 }
				else = { set_variable = { which = positive_minerals_reserve_month value = 1 } }
			}			
			remove_country_flag = is_minerals_starved
		}
		
		
		#count full reserve and income
		set_variable = { which = minerals_reserve value = 0 }		
		set_variable = { which = minerals_income value = 0 }
		set_variable = { which = reserve_transport value = 0 }
		count_minerals_reserve = yes #ignores decimal places 		
		restore_minerals_reserve = yes	
		determine_minerals_income = yes
		
		#modify weight(country) and set starved flag
		if = { 
			limit = {minerals < 0.001}
			set_variable = { which = positive_minerals_reserve_month value = 0 } 
			set_country_flag = is_minerals_starved
		}
		if = {
			limit = {has_monthly_income = { resource = minerals value < 5 }}
			change_variable = { which = minerals_weight value = 3 }
			if = { 
				limit = { 
					has_monthly_income = { resource = minerals value < 1 }
					OR = { 
						minerals < 1
						has_modifier = mineral_deficit
					}							
				}	
				set_country_flag = is_minerals_starved
				change_variable = { which = minerals_weight value = 10 }
			}	
			if = {
				limit = { has_monthly_income = { resource = food value < -10 } }
				change_variable = { which = minerals_weight value = 4 }
			}
			if = {
				limit = { has_monthly_income = { resource = food value < -20 } }
				change_variable = { which = minerals_weight value = 5 }
			}
		}

		
		#stored research points will be updated after the on_action on_monthly_pulse
		#=> the following code will show the stored points of the last month, if called by monthly_pulse
		###PHYSICS###
		#update physics_research_reserve, physics_research_income variables


		#count stored points and check income
		set_variable = { which = physics_research_reserve value = 0 }		
		set_variable = { which = physics_research_income value = 0 }
		set_variable = { which = reserve_transport value = 0 }
		count_physics_research_reserve = yes #ignores decimal places 		
		restore_physics_research_reserve = yes
		determine_physics_research_income = yes		
		
		###SOCIETY###
		#update society_research_reserve, society_research_income variables


		#count stored points and check income
		set_variable = { which = society_research_reserve value = 0 }		
		set_variable = { which = society_research_income value = 0 }
		set_variable = { which = reserve_transport value = 0 }
		count_society_research_reserve = yes #ignores decimal places 		
		restore_society_research_reserve = yes
		determine_society_research_income = yes
		
		###ENGINEERING###
		#update engineering_research_reserve, engineering_research_income variables


		#count stored points and check income
		set_variable = { which = engineering_research_reserve value = 0 }		
		set_variable = { which = engineering_research_income value = 0 }
		set_variable = { which = reserve_transport value = 0 }
		count_engineering_research_reserve = yes #ignores decimal places 		
		restore_engineering_research_reserve = yes
		determine_engineering_research_income = yes
		
		###UNITY###
		#update unity_reserve, unity_income variables


		#count stored points and check income
		set_variable = { which = unity_reserve value = 0 }		
		set_variable = { which = unity_income value = 0 }
		set_variable = { which = reserve_transport value = 0 }
		count_unity_reserve = yes #ignores decimal places 		
		restore_unity_reserve = yes
		determine_unity_income = yes				
		
		#log = "food_reserve: [This.food_reserve]"
		#log = "food_income: [This.food_income]"
		#log = "energy_reserve: [This.energy_reserve]"
		#log = "energy_income: [This.energy_income]"
		#log = "minerals_reserve: [This.minerals_reserve]"
		#log = "minerals_income: [This.minerals_income]"
		#log = "society_research_reserve: [This.society_research_reserve]"
		#log = "society_research_income: [This.society_research_income]"
		#log = "physics_research_reserve: [This.physics_research_reserve]"
		#log = "physics_research_income: [This.physics_research_income]"
		#log = "engineering_research_reserve: [This.engineering_research_reserve]"
		#log = "engineering_research_income: [This.engineering_research_income]"
		#log = "unity_reserve: [This.unity_reserve]"
		#log = "unity_income: [This.unity_income]"		
		#else = {
			#log = "Check ignored"
		#}
	}
}
### The effect below checks the resource requirements of the country
check_resource_requirements = {
	switch = {
		trigger = has_country_flag
		society_research_focus_factor_1 = { remove_country_flag = society_research_focus_factor_1 }
		society_research_focus_factor_2 = { remove_country_flag = society_research_focus_factor_2 }
		physics_research_focus_factor_1 = { remove_country_flag = physics_research_focus_factor_1 }
		physics_research_focus_factor_2 = { remove_country_flag = physics_research_focus_factor_2 }
		engineering_research_focus_factor_1 = { remove_country_flag = engineering_research_focus_factor_1 }
		engineering_research_focus_factor_2 = { remove_country_flag = engineering_research_focus_factor_2 }
		energy_focus_factor_1 = { remove_country_flag = energy_focus_factor_1 }
		energy_focus_factor_2 = { remove_country_flag = energy_focus_factor_2 }
		minerals_focus_factor_1 = { remove_country_flag = minerals_focus_factor_1 }
		minerals_focus_factor_2 = { remove_country_flag = minerals_focus_factor_2 }
		food_delimited = { remove_country_flag = food_delimited }
		food_focus_factor_1 = { remove_country_flag = food_focus_factor_1 }
		food_focus_factor_2 = { remove_country_flag = food_focus_factor_2 }
		food_focus_factor_3 = { remove_country_flag = food_focus_factor_3 }
		food_focus_factor_4 = { remove_country_flag = food_focus_factor_4 }
		unity_focus = { remove_country_flag = unity_focus }
	}
	if = {
		limit = {
			check_variable = { which = society_research_income value < physics_research_income }
			check_variable = { which = society_research_income value < engineering_research_income }
		}
		multiply_variable = { which = society_research_income value = 1.25 }
		if = {
			limit = {
				check_variable = { which = society_research_income value < physics_research_income }
				check_variable = { which = society_research_income value < engineering_research_income }
			}
			set_country_flag = society_research_focus_factor_2
			else = {
				if = {
					limit = {
						OR = {
							check_variable = { which = society_research_income value < physics_research_income }
							check_variable = { which = society_research_income value < engineering_research_income }
						}
					}
					set_country_flag = society_research_focus_factor_1
				}
			}
		}
		else = {
			if = {
				limit = {
					check_variable = { which = physics_research_income value < society_research_income }
					check_variable = { which = physics_research_income value < engineering_research_income }
				}
				multiply_variable = { which = physics_research_income value = 1.25 }
				if = {
					limit = {
						check_variable = { which = physics_research_income value < society_research_income }
						check_variable = { which = physics_research_income value < engineering_research_income }
					}
					set_country_flag = physics_research_focus_factor_2
					else = {
						if = {
							limit = {
								OR = {
									check_variable = { which = physics_research_income value < society_research_income }
									check_variable = { which = physics_research_income value < engineering_research_income }
								}
							}
							set_country_flag = physics_research_focus_factor_1
						}
					}
				}
				else = {
					if = {
						limit = {
							check_variable = { which = engineering_research_income value < society_research_income }
							check_variable = { which = engineering_research_income value < physics_research_income }
						}
						multiply_variable = { which = engineering_research_income value = 1.25 }
						if = {
							limit = {
								check_variable = { which = engineering_research_income value < society_research_income }
								check_variable = { which = engineering_research_income value < physics_research_income }
							}
							set_country_flag = engineering_research_focus_factor_2
							else = {
								if = {
									limit = {
										OR = {
											check_variable = { which = engineering_research_income value < society_research_income }
											check_variable = { which = engineering_research_income value < physics_research_income }
										}
									}
									set_country_flag = engineering_research_focus_factor_1
								}
							}
						}
					}
				}
			}
		}
	}
	if = {
		limit = {
			check_variable = { which = minerals_income value > 10 }
			check_variable = { which = energy_income value > 10 }
		}
		if = {
			limit = {
				check_variable = { which = minerals_income value > energy_income }
			}
			divide_variable = { which = minerals_income value = energy_income }
			if = {
				limit = {
					check_variable = { which = minerals_income value > 2 }
				}
				set_country_flag = energy_focus_factor_2
				else = {
					if = {
						limit = {
							check_variable = { which = minerals_income value > 1.49 }
						}
						set_country_flag = energy_focus_factor_1
					}
				}
			}
			else = {
				if = {
					limit = {
						check_variable = { which = energy_income value > minerals_income }
					}
					divide_variable = { which = energy_income value = minerals_income }
					if = {
						limit = {
							check_variable = { which = energy_income value > 2 }
						}
						set_country_flag = minerals_focus_factor_2
						else = {
							if = {
								limit = {
									check_variable = { which = energy_income value > 1.49 }
								}
								set_country_flag = minerals_focus_factor_1
							}
						}
					}
				}
			}
		}
	}
	if = {
		limit = {
			OR = {
				is_machine_empire = no
				is_servitor = yes				
				is_synth_empire = yes				
			}
			any_owned_pop = { is_colony_pop = yes is_robot_pop = no is_growing = yes }	
		}
		if = { 
			limit = { has_monthly_income = { resource = food value > 0 } }			
			set_variable = { which = num_growing_planets value = 0 }
			every_owned_planet = {
				limit = { is_colony = yes has_growing_pop = yes free_pop_tiles > 0 }
				prev = {
					change_variable = { which = num_growing_planets value = 1 }
				}
			}
			if = {
				limit = {
					check_variable = { which = num_growing_planets value > 0 }
				}
				set_variable = { which = food_requirment value = 0 }
				while = {
					limit = {
						check_variable = { which = num_growing_planets value > 0 }
					}
					change_variable = { which = food_requirment value = 100 }
					change_variable = { which = num_growing_planets value = -1 }
				}
				if = {
					limit = {
						check_variable = { which = food_requirment value > food_income }
					}
					set_country_flag = food_delimited
					else = {
						set_variable = { which = food_requirment_check value = food_requirment }
						multiply_variable = { which = food_requirment_check value = 1.25 }
						if = {
							limit = {
								check_variable = { which = food_requirment_check value > food_income }
							}
							set_country_flag = food_focus_factor_1
							else = {
								set_variable = { which = food_requirment_check value = food_requirment }
								multiply_variable = { which = food_requirment_check value = 1.5 }
								if = {
									limit = {
										check_variable = { which = food_requirment_check value > food_income }
									}
									set_country_flag = food_focus_factor_2
									else = {
										set_variable = { which = food_requirment_check value = food_requirment }
										multiply_variable = { which = food_requirment_check value = 1.75 }
										if = {
											limit = {
												check_variable = { which = food_requirment_check value > food_income }
											}
											set_country_flag = food_focus_factor_3
											else = {
												set_variable = { which = food_requirment_check value = food_requirment }
												multiply_variable = { which = food_requirment_check value = 2 }
												if = {
													limit = {
														check_variable = { which = food_requirment_check value > food_income }
													}
													set_country_flag = food_focus_factor_4
												}
											}
										}
									}
								}
							}
						}
					}
				}				
			}
		}
		else = { set_country_flag = food_delimited }
	}	
	if = {
		limit = {
			NOR = { has_country_flag = food_focus_factor_3 has_country_flag = food_focus_factor_4 has_country_flag = energy_focus_factor_2 has_country_flag = minerals_focus_factor_2 }
			has_monthly_income = { resource = energy value > 50 }
			has_monthly_income = { resource = minerals value > 200 }
		}
		set_country_flag = unity_focus
	}
}
calculate_number_of_required_shipyard_systems = {
	set_variable = { which = num_controlled_systems value = 0 }
	set_variable = { which = num_existing_shipyard_systems value = 0 }
	every_system_within_border = {
		prev = {
			change_variable = { which = num_controlled_systems value = 1 }
		}
		if = { 
			limit = { has_star_flag = shipyard_system }
			change_variable = { which = num_existing_shipyard_systems value = 1 }
		}	
	}
	set_variable = { which = required_shipyard_systems value = num_controlled_systems }
	divide_variable = { which = required_shipyard_systems value = 30 }
	divide_variable = { which = required_shipyard_systems value = 1000 }
	multiply_variable = { which = required_shipyard_systems value = 1000 }
	subtract_variable = { which = required_shipyard_systems value = num_existing_shipyard_systems }
}
