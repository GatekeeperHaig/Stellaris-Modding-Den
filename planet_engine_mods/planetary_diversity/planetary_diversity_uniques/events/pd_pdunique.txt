namespace = pdunqiue

event = {
	id = pdunqiue.00
	hide_window = yes
	is_triggered_only = yes
	fire_only_once = yes
	immediate = { set_global_flag = planetarydiversityuniques }
}

# Pop creation event for techno Army's Ancient Cloning Vats
country_event = {
	id = pdunqiue.01
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_origin = origin_techno_world
	}

	immediate = {
		every_owned_planet = {
			limit = {
				is_colony = yes
				is_under_colonization = no
			}

			# Figure out how many (not disabled) VATS the planet has.
			export_trigger_value_to_variable = {
				trigger = num_buildings
				parameters = {
					type = building_techno_04_clone_vat
					disabled = no
				}
				variable = num_techno_vats
			}

			# Figure out techno Army Population (only OWN species are compatible, not imported ones)
			set_variable = { which = num_techno_pops value = 0 }
			every_owned_pop = {
				limit = {
					owner_main_species = { is_same_species = prev }
					OR = {
						has_trait = trait_organic_fourschildren
						has_trait = trait_organic_fourschildren_2
					}
				}
				prev = { change_variable = { which = num_techno_pops value = 1 } }
			}

			### Variable 'techno_pops_missing' read by 'should_force_decline_species' and must be updated.
			### techno_pops_missing = (20 * num_techno_vats) - num_techno_pops
			set_variable = { which = techno_pops_missing value = 25 }
			multiply_variable = { which = techno_pops_missing value = num_techno_vats }
			subtract_variable = { which = techno_pops_missing value = num_techno_pops }

			### Override it to -1 if there are no pops on the planet, but the planet could not sustain them
			### Only applies after colonization. Prevents pops from auto-migrating and immediately being purged
			if = {
				limit = {
					check_variable = { which = num_techno_pops value = 0 }
					check_variable = { which = num_techno_vats value = 0 }
				}
				set_variable = { which = techno_pops_missing value = -1 }
			}

			### Variable 'techno_pops_missing_per_vat' is read by 'building_techno_army_clone_vat' and must be updated.
			set_variable = { which = techno_pops_missing_per_vat value = 0 }

			# Always remove modifier. Reapply further down if still needed.
			remove_modifier = modifier_techno_pops_decline

			if = {
				limit = {
					check_variable = { which = techno_pops_missing value > 0 }
				}

				### Growing.
				### techno_pops_missing_per_vat = techno_pops_missing / num_techno_vats, don't divide by 0.
				set_variable = { which = techno_pops_missing_per_vat value = techno_pops_missing }
				divide_variable = { which = techno_pops_missing_per_vat value = num_techno_vats }
			}
			else_if = {
				limit = {
					check_variable = { which = techno_pops_missing value = 0 }
				}
				### Pop stable.
			}
			else_if = {
				limit = { ### No need to set modifier if no declining pops present
					check_variable = { which = num_techno_pops value > 0 }
					OR = {
						NOT = { exists = declining_species }
						declining_species = { is_same_species = root }
					}
				}
				### Pop above max, should decline. Variable 'techno_pops_missing' is negative:
				### techno_pops_decline_factor = ( 4 % per month - techno_pops_missing ) / BASE_POP_DECLINE
				set_variable = { which = techno_pops_decline_factor value = 4 }
				subtract_variable = { which = techno_pops_decline_factor value = techno_pops_missing }
				divide_variable = { which = techno_pops_decline_factor value = 5 }	# 5 should match BASE_POP_DECLINE.
				subtract_variable = { which = techno_pops_decline_factor value = 1 }	# Subtract base decline.

				add_modifier = {
					modifier = modifier_techno_pops_decline
					multiplier = techno_pops_decline_factor
					clear_on_owner_change = yes
				}
			}

			# Debug growth/decline.
			#log = "technos on '[This.GetName]'. techno_pops_missing is: [This.techno_pops_missing], techno_pops_missing_per_vat: [This.techno_pops_missing_per_vat], techno_pops_decline_factor: [This.techno_pops_decline_factor]"
		}
	}
}

event = {
	id = pdunqiue.02
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		every_playable_country = {
			limit = {
				has_origin = origin_techno_world
			}
			# Create a backup leader, to remember what Portrait this Species had before we overwrite it.
			create_saved_leader = {
				creator = this
				name = "Backup Portrait"
				key = "techno_army_main_species_generic_portrait"
				species = owner_main_species
			}

			owner_main_species = {
				change_species_characteristics = {
					portrait = prev.ruler
					gender = prev.ruler
					can_be_modified = no
					can_change_leader = yes
				}
			}
		}
	}
}