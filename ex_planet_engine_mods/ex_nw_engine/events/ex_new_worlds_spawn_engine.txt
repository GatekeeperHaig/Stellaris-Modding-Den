###### Written by ExNihil 
#
#	This mod uses a configurable spawn engine. If you'd like to integrate a version of this engine please join our discord server The Stellaris Modding Den
#	Server invite: https://discord.gg/ZhvBXhh

namespace = ex_spawn_engine_0

event = { #this event triggers on game start and monthly pulse
	id = ex_spawn_engine_0.0
	hide_window = yes
	is_triggered_only = yes
	fire_only_once = yes
	
	#This event fires only once.
		
	immediate = {	
		set_global_flag = new_worlds_active #this sets a global flag for this mod, to be used by other mods and the engine
		every_planet = { 
			limit = { is_star = no }	
			if = { #this adds a unique flag to gas giant moons, which is checked through a scripted trigger (see common/scripted_triggers/ex_engine_triggers.txt )
				limit = {
					is_planet_class = pc_gas_giant
					has_moon = yes
				}
				every_moon = { set_planet_flag = gas_giant_moon }
			}	
		}	
		every_planet = {
			limit = {				
				solar_system = { 
					starting_system = no
					NOR = {
						has_star_flag = sol_system
						has_star_flag = sol
						has_star_flag = deneb_system
						has_star_flag = custom_system
						has_star_flag = crystal_system
						has_star_flag = floating_system
					}					
				}
				is_capital = no
				is_homeworld = no
			}			
			# these events occur one after the other. 
			planet_event = { id = ex_spawn_engine_0.1 }
			planet_event = { id = ex_spawn_engine_0.2 }			
			planet_event = { id = ex_spawn_engine_0.4 days = 1 }
		}
	}
}



planet_event = { 
	id = ex_spawn_engine_0.1
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		if = { 
			limit = { is_star = yes }		
			if = { 
				limit = { solar_system = { NOT = { any_planet = { NOT = { is_same_value = root } has_planet_flag = system_star_1 } } } }
				set_planet_flag = system_star_1				
				else = {
					if = { 
						limit = { solar_system = { NOT = { any_planet = { NOT = { is_same_value = root } has_planet_flag = system_star_2 } } } }
						set_planet_flag = system_star_2						
						else = {
							if = { 
								limit = { solar_system = { NOT = { any_planet = { NOT = { is_same_value = root } has_planet_flag = system_star_3 } } } }
								set_planet_flag = system_star_3						
							}
						}
					}
				}				
			}	
			#the effect below is currently not in use. It can be enabled at any time by uncommenting it. 	
			#	ex_new_worlds_adjust_star_size = yes 
		}
		if = {
			limit = { 
				is_vanilla_habitable_planet = yes
				any_tile = { has_pop = yes }
				any_pop = { has_regular_habitability_trait = yes }
				OR = {					
					any_pop = { is_presapient_pop = yes }
					AND = {
						exists = owner
						OR = {
							owner = { is_country_type = primitive }
							AND = {
								is_colony = yes				
								any_pop = {
									has_regular_habitability_trait = yes
									OR = {
										is_subspecies = yes
										NOT = { species = { is_same_value = owner.species }	}																		
									}										
								}	
							}	
						}	
					}
				}	
			}
			every_owned_pop = {
				limit = { has_regular_habitability_trait = yes }
				check_habitability_trait_correspondence = yes
			}	
		}				
		if = {
			limit = { is_colonizable = no is_star = no }
			ex_new_worlds_adjust_uninhabitable_planet_size = yes
			ex_new_worlds_uninhabitable_planets_spawn_table = yes			
		}	
		if = {
			limit = { is_colonizable = yes }
			ex_new_worlds_adjust_inhabitable_planet_size = yes
			ex_new_worlds_habitable_planets_spawn_table = yes
		}		 				
	}
}

planet_event = { 
	id = ex_spawn_engine_0.2
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {		
		if = {
			limit = { has_regular_planet_modifier = yes	}
			remove_regular_planet_modifiers = yes 
			ex_planet_modifier_spawn_engine = yes
		}		
		if = {
			limit = {
				OR = {
					is_planet_class = pc_gas_giant
					is_planet_class = pc_ice_giant
				}	
				has_moon = yes
				any_moon = { NOT = { has_planet_flag = gas_giant_moon } }
			}
			every_moon = { 
				limit = { NOT = { has_planet_flag = gas_giant_moon } }
				set_planet_flag = gas_giant_moon
			}
		}					
		if = {
			limit = { any_tile = { is_orbital_tile = yes has_deposit = yes has_regular_vanilla_deposit = yes } }
			random_tile = { 
				limit = { is_orbital_tile = yes has_deposit = yes has_regular_vanilla_deposit = yes }
				clear_deposits = yes
				ex_new_worlds_orbital_resource_spawn_table = yes
			}				
		}		
		if = {
			limit = { is_colonizable = yes }	
			#ex_new_worlds_adjust_inhabitable_planet_size = yes
			every_tile = { 
				limit = { is_orbital_tile = no has_deposit = yes has_regular_vanilla_deposit = yes has_building = no }
				clear_deposits = yes
				ex_new_worlds_planetary_resource_spawn_table = yes			
			}				
			if = {
				limit = { NOT = { any_tile = { has_blocker = yes } } }
				every_tile = {
					limit = { is_orbital_tile = no has_building = no has_pop = no }
					random_list = { 
						55 = { ex_new_worlds_tile_blocker_spawn_table = yes } 
						45 = { } 
					}
				}
				else = {
					every_tile = {
						limit = { has_blocker = yes has_regular_blocker = yes }
						remove_blocker = yes
						ex_new_worlds_tile_blocker_spawn_table = yes
					}				
				}					
			}	
			if = {
				limit = {
					OR = {
						planetary_diversity_habitable_planet = yes
						new_worlds_habitable_planet = yes
					}
				}				
				planet_event = { id = ex_spawn_engine_0.3 }				
			}				
		}	
	}
}			

planet_event = { 
	id = ex_spawn_engine_0.3
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		if = {
			limit = {
				OR = {
					any_tile = { has_pop = yes pop = { is_presapient_pop = yes } }
					AND = {
						has_owner = yes
						OR = {
							AND = {
								is_colony = yes				
								any_pop = {
									has_regular_habitability_trait = yes
									OR = {
										NOT = { species = { is_same_value = owner.species } }
										is_subspecies = yes
									}
								}										
							}	
							owner = { is_country_type = primitive }
						}	
					}
				}	
				any_tile = {
					has_pop = yes
					pop = { has_regular_habitability_trait = yes }
				}	
			}
		ex_change_habitability_trait_correspondence = yes
	}								
	if = { #change presapient/primitive species
		limit = { 
			any_tile = { has_pop = yes }
				OR = {
					any_pop = { is_presapient_pop = yes } 
					AND = {
						exists = owner
						owner = { is_country_type = primitive }
					}
				}	
			}
			random_pop = {
				limit = {
					OR = {
						is_presapient_pop = yes 
						AND = {
							exists = owner
							owner = { is_country_type = primitive }
						}	
					}
				}	
				ex_new_worlds_species_change_table = yes
			}					
		}	
	}	
}	

planet_event = {
	id = ex_spawn_engine_0.4
	hide_window = yes
	triggered_only = yes
	
	trigger = {
		NOT = { has_planet_flag = elements_rerolled }
		OR = {
			is_planet_class = pc_greenhouse_hot
			is_planet_class = pc_greenhouse_cold
			is_planet_class = pc_ammonia
			is_planet_class = pc_methane
		}			
		OR = {
			AND = {
				planet_size > 19
				count_tile = {					
					has_deposit = yes					
					count < 6
				}
			}
			AND = {
				planet_size > 15
				planet_size < 19
				count_tile = {					
					has_deposit = yes
					count < 5 
				}
			}	
			AND = {
				planet_size > 10
				planet_size < 16
				count_tile = {					
					has_deposit = yes
					count < 4
				}
			}				
			AND = {
				planet_size < 11
				count_tile = {					
					has_deposit = yes
					count < 3
				}
			}				
			AND = {
				planet_size > 19
				count_tile = {					
					has_blocker = yes					
					count < 4
				}
			}
			AND = {
				planet_size > 15
				planet_size < 19
				count_tile = {					
					has_deposit = yes
					count < 3 
				}
			}	
			AND = {
				planet_size > 10
				planet_size < 16
				count_tile = {					
					has_deposit = yes
					count < 2
				}
			}				
			AND = {
				planet_size < 11
				count_tile = {					
					has_deposit = yes
					count < 1
				}
			}			
		}	
	}	
	
	immediate = {
		set_planet_flag = elements_rerolled
		if = {
			limit = { NOT = { any_tile = { is_orbital_tile = no has_deposit = yes } } }
			reroll_deposits = yes
			every_tile = {
				limit = { is_orbital_tile = no has_deposit = yes }
				if = { limit = { has_deposit = d_ersatz_betharian_deposit } set_deposit = d_betharian_deposit }
				if = { limit = { has_deposit = d_ersatz_alien_pets_deposit } set_deposit = d_alien_pets_deposit }			
				if = { limit = { has_deposit = d_ersatz_mineral_deposit } set_deposit = d_mineral_deposit }
				if = { limit = { has_deposit = d_ersatz_rich_mineral_deposit } set_deposit = d_rich_mineral_deposit }
				if = { limit = { has_deposit = d_ersatz_vast_mineral_deposit } set_deposit = d_vast_mineral_deposit }
				if = { limit = { has_deposit = d_ersatz_mineral_energy_deposit } set_deposit = d_mineral_energy_deposit }
				if = { limit = { has_deposit = d_ersatz_rich_mineral_energy_deposit } set_deposit = d_rich_mineral_energy_deposit }
				if = { limit = { has_deposit = d_ersatz_mineral_food_deposit } set_deposit = d_mineral_food_deposit } 
				if = { limit = { has_deposit = d_ersatz_rich_food_mineral_deposit } set_deposit = d_rich_food_mineral_deposit } 
				if = { limit = { has_deposit = d_ersatz_energy_deposit } set_deposit = d_energy_deposit }
				if = { limit = { has_deposit = d_ersatz_rich_energy_deposit } set_deposit = d_rich_energy_deposit }
				if = { limit = { has_deposit = d_ersatz_vast_energy_deposit } set_deposit = d_vast_energy_deposit }
				if = { limit = { has_deposit = d_ersatz_immense_energy_deposit } set_deposit = d_immense_energy_deposit }
				if = { limit = { has_deposit = d_ersatz_farmland_deposit } set_deposit = d_farmland_deposit } 
				if = { limit = { has_deposit = d_ersatz_rich_farmland_deposit } set_deposit = d_rich_farmland_deposit } 
				if = { limit = { has_deposit = d_ersatz_vast_farmland_deposit } set_deposit = d_vast_farmland_deposit } 
				if = { limit = { has_deposit = d_ersatz_immense_farmland_deposit } set_deposit = d_immense_farmland_deposit } 
				if = { limit = { has_deposit = d_ersatz_society_deposit } set_deposit = d_society_deposit }
				if = { limit = { has_deposit = d_ersatz_rich_society_deposit } set_deposit = d_rich_society_deposit }
				if = { limit = { has_deposit = d_ersatz_vast_society_deposit } set_deposit = d_vast_society_deposit }
				if = { limit = { has_deposit = d_ersatz_physics_deposit } set_deposit = d_physics_deposit }
				if = { limit = { has_deposit = d_ersatz_rich_physics_deposit } set_deposit = d_rich_physics_deposit }
				if = { limit = { has_deposit = d_ersatz_vast_physics_deposit } set_deposit = d_vast_physics_deposit }
				if = { limit = { has_deposit = d_ersatz_engineering_deposit } set_deposit = d_engineering_deposit }
				if = { limit = { has_deposit = d_ersatz_rich_engineering_deposit } set_deposit = d_rich_engineering_deposit }
				if = { limit = { has_deposit = d_ersatz_vast_engineering_deposit } set_deposit = d_vast_engineering_deposit }
			}				
			every_tile = { 
				limit = { is_orbital_tile = no has_deposit = yes has_regular_vanilla_deposit = yes }
				clear_deposits = yes
				ex_new_worlds_planetary_resource_spawn_table = yes			
			}	
		}	
		if = {
			limit = { NOT = { any_tile = { is_orbital_tile = no has_blocker = yes } } }		
			every_tile = {
				limit = { is_orbital_tile = no has_building = no has_pop = no }
				random_list = { 
					45 = { ex_new_worlds_tile_blocker_spawn_table = yes } 
					55 = { } 
				}
			}		
		}	
	}
}