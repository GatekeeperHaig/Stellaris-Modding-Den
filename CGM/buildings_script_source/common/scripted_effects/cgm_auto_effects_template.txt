add_science_adjacency_building = {
	log = "trying to build standard on tile [prev.cgm_curTile]"
	add_building_construction = building_basic_science_lab_1
	if = {
		limit = {
			or = { has_building = yes has_building_construction = yes }
		}
		prevprev = { set_country_flag = cgm_auto_built }
	}
}
add_engineering_research_building = {
	log = "trying to build standard on tile [prev.cgm_curTile]"
	add_building_construction = building_basic_science_lab_1
	if = {
		limit = {
			or = { has_building = yes has_building_construction = yes }
		}
		prevprev = { set_country_flag = cgm_auto_built }
	}
}
add_physics_research_building = {
	log = "trying to build standard on tile [prev.cgm_curTile]"
	add_building_construction = building_basic_science_lab_1
	if = {
		limit = {
			or = { has_building = yes has_building_construction = yes }
		}
		prevprev = { set_country_flag = cgm_auto_built }
	}
}
add_society_research_building = {
	log = "trying to build standard on tile [prev.cgm_curTile]"
	add_building_construction = building_basic_science_lab_1
	if = {
		limit = {
			or = { has_building = yes has_building_construction = yes }
		}
		prevprev = { set_country_flag = cgm_auto_built }
	}
}
add_base_res_adjacency_building = {
	log = "trying to build standard on tile [prev.cgm_curTile]"
	add_building_construction = building_power_hub_1
	if = {
		limit = {
			or = { has_building = yes has_building_construction = yes }
		}
		prevprev = { set_country_flag = cgm_auto_built }
	}
}
add_food_building = {
	log = "trying to build standard on tile [prev.cgm_curTile]"
	add_building_construction = building_hydroponics_farm_1
	if = {
		limit = {
			or = { has_building = yes has_building_construction = yes }
		}
		prevprev = { set_country_flag = cgm_auto_built }
	}
}
add_minerals_building = {
	log = "trying to build standard on tile [prev.cgm_curTile]"
	add_building_construction = building_mining_network_1
	if = {
		limit = {
			or = { has_building = yes has_building_construction = yes }
		}
		prevprev = { set_country_flag = cgm_auto_built }
	}
}
add_energy_building = {
	log = "trying to build standard on tile [prev.cgm_curTile]"
	add_building_construction = building_power_plant_1
	if = {
		limit = {
			or = { has_building = yes has_building_construction = yes }
		}
		prevprev = { set_country_flag = cgm_auto_built }
	}
}
 #this = tile
 #prev = planet
 #prevprev = country
 #Build the building that fits the category defined in the name of each trigger.
 #Check if unique buildings of that category can be build first and do so if possible
 #Leave the 'succesful ->set flag' at the end as it is
cgm_add_special_building = {
	log = "trying to build special on tile [prev.cgm_curTile]"
	 #SPECIAL BUILDING NUMBER 1:
	if = {
		limit = {
			prev.owner = {
				check_variable = { which = cgm_special_bestBuilding value = 1 }
			}
		}
		add_building_construction = building_autochthon_monument
	}
	 #SPECIAL BUILDING NUMBER 2:
	if = {
		limit = {
			prev.owner = {
				check_variable = { which = cgm_special_bestBuilding value = 2 }
			}
		}
		add_building_construction = building_fortress
	}
	if = {
		limit = {
			or = { has_building = yes has_building_construction = yes }
		}
		prevprev = { set_country_flag = cgm_auto_built }
	}
}
 #Special SEARCH effect:
# this = planet
#  prev/owner = country
cgm_search_for_special_building = {
	 #TODO search for special building!
	 #define tmp global event target to the planet we want to build on and a tile specification on that scope. We can later use those to build when this weight is better than the general one
	log = "searching for special buildings on planet [this.GetName]"
	 #SPECIAL BUILDING NUMBER 1:
	if = {
		limit = {
			NOT = { has_building = building_autochthon_monument }
			prev = {
				check_variable = { which = cgm_special_bestWeight value < 20 }
			}
		}
		prev = {
			set_variable = { which = cgm_special_bestWeight value = 20 }
			set_variable = { which = cgm_special_bestBuilding value = 1 }
		}
		save_global_event_target_as = cgm_best_planet_for_special
	}
	 #SPECIAL BUILDING NUMBER 2: FORTRESS
	set_variable = { which = cgm_special_bestWeight value = 10 }
	 #cgm_special_bestWeight named like this for easier comparison! Local scope!
	if = {
		limit = {
			has_planet_flag = NEEDS_DEFENSE
			multiply_variable = { which = cgm_special_bestWeight value = 4 }
		}
	}
	if = {
		limit = {
			prev = {
				check_variable = { which = cgm_special_bestWeight value < prev }
			}
		}
		prev = {
			set_variable = { which = cgm_special_bestWeight value = prev }
			set_variable = { which = cgm_special_bestBuilding value = 1 }
		}
		save_global_event_target_as = cgm_best_planet_for_special
	}
}
