set_tile_building_weight = { 	
	### set variables for the tile in the planet scope. Every-time this effect is used, the variables are reset to 0
	root = {
		set_variable = { which = energy_tile_weight value = 0 }
		set_variable = { which = minerals_tile_weight value = 0 }
		set_variable = { which = food_tile_weight value = 0 }
		set_variable = { which = unity_tile_weight value = 0 }
		set_variable = { which = society_tile_weight value = 0 }
		set_variable = { which = physics_tile_weight value = 0 }
		set_variable = { which = engineering_tile_weight value = 0 }		
	### add the country scope weight variables into the tile weight variables stored in planet scope
		change_variable = { which = energy_tile_weight value = energy_weight }
		change_variable = { which = minerals_tile_weight value = minerals_weight }
		change_variable = { which = food_tile_weight value = food_weight }
		multiply_variable = { which = energy_tile_weight value = energy_planet_mult }
		multiply_variable = { which = minerals_tile_weight value = minerals_planet_mult }
		multiply_variable = { which = food_tile_weight value = food_planet_mult }
		multiply_variable = { which = society_tile_weight value = society_planet_mult }
		multiply_variable = { which = physics_tile_weight value = physics_planet_mult }
		multiply_variable = { which = engineering_tile_weight value = engineering_planet_mult }
	}
	if = { 
		limit = { exists = pop }
		pop = { calculate_pop_multipliers = yes }
		root = {
			multiply_variable = { which = energy_tile_weight value = energy_pop_mult }
			multiply_variable = { which = minerals_tile_weight value = minerals_pop_mult }
			multiply_variable = { which = food_tile_weight value = food_pop_mult }
			multiply_variable = { which = society_tile_weight value = society_pop_mult }
			multiply_variable = { which = physics_tile_weight value = physics_pop_mult }
			multiply_variable = { which = engineering_tile_weight value = engineering_pop_mult }
		}	
	}		
	### compare the variables and find the highest number
	if = { 
		limit = { 
			root = { 
				check_variable = { which = energy_tile_weight value > minerals_tile_weight }
				check_variable = { which = energy_tile_weight value > food_tile_weight }
				check_variable = { which = energy_tile_weight value > society_tile_weight }
				check_variable = { which = energy_tile_weight value > physics_tile_weight }
				check_variable = { which = energy_tile_weight value > engineering_tile_weight }
			}	
		}
		add_deposit = energy_building_tile
	}	
	if = { 
		limit = { 
			root = { 
				check_variable = { which = minerals_tile_weight value > energy_tile_weight }
				check_variable = { which = minerals_tile_weight value > food_tile_weight }
				check_variable = { which = minerals_tile_weight value > society_tile_weight }
				check_variable = { which = minerals_tile_weight value > physics_tile_weight }
				check_variable = { which = minerals_tile_weight value > engineering_tile_weight }
			}	
		}
		add_deposit = minerals_building_tile
	}
	if = { 
		limit = { 
			root = { 
				check_variable = { which = food_tile_weight value > energy_tile_weight } 
				check_variable = { which = food_tile_weight value > minerals_tile_weight } 
				check_variable = { which = food_tile_weight value > society_tile_weight } 
				check_variable = { which = food_tile_weight value > physics_tile_weight } 
				check_variable = { which = food_tile_weight value > engineering_tile_weight } 
			}	
		}
		add_deposit = food_building_tile
	}
	if = { 
		limit = { 
			root = { 
				check_variable = { which = society_tile_weight value > energy_tile_weight } 
				check_variable = { which = society_tile_weight value > minerals_tile_weight } 
				check_variable = { which = society_tile_weight value > food_tile_weight } 
				check_variable = { which = society_tile_weight value > physics_tile_weight } 
				check_variable = { which = society_tile_weight value > engineering_tile_weight } 
			}	
		}
		add_deposit = society_building_tile
	}
	if = { 
		limit = { 
			root = { 
				check_variable = { which = physics_tile_weight value > energy_tile_weight } 
				check_variable = { which = physics_tile_weight value > minerals_tile_weight } 
				check_variable = { which = physics_tile_weight value > food_tile_weight } 
				check_variable = { which = physics_tile_weight value > society_tile_weight } 
				check_variable = { which = physics_tile_weight value > engineering_tile_weight } 
			}	
		}
		add_deposit = physics_building_tile
	}
	if = { 
		limit = { 
			root = { 
				check_variable = { which = engineering_tile_weight value > energy_tile_weight } 
				check_variable = { which = engineering_tile_weight value > minerals_tile_weight } 
				check_variable = { which = engineering_tile_weight value > food_tile_weight } 
				check_variable = { which = engineering_tile_weight value > society_tile_weight }
				check_variable = { which = engineering_tile_weight value > physics_tile_weight }
			}	
		}
		add_deposit = engineering_building_tile
	}
}	