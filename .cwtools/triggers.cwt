
alias[trigger:scope] = { alias_name[trigger] = alias_match_left[trigger] }

alias[trigger:NOT] = { 
    ## cardinality = 1..1
    alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:NOR] = { alias_name[trigger] = alias_match_left[trigger] }
alias[trigger:NAND] = { alias_name[trigger] = alias_match_left[trigger] }
alias[trigger:AND] = { alias_name[trigger] = alias_match_left[trigger] }
alias[trigger:OR] = { alias_name[trigger] = alias_match_left[trigger] }
alias[trigger:hidden_trigger] = { alias_name[trigger] = alias_match_left[trigger] }

alias[trigger:if] = {
    limit = { alias_name[trigger] = alias_match_left[trigger] }
    alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:else] = { alias_name[trigger] = alias_match_left[trigger] }


#Scopes

alias[trigger:THIS] = { alias_name[trigger] = alias_match_left[trigger] }
alias[trigger:ROOT] = { alias_name[trigger] = alias_match_left[trigger] }
alias[trigger:PREV] = { alias_name[trigger] = alias_match_left[trigger] }
alias[trigger:PREVPREV] = { alias_name[trigger] = alias_match_left[trigger] }
alias[trigger:PREVPREVPREV] = { alias_name[trigger] = alias_match_left[trigger] }
alias[trigger:PREVPREVPREVPREV] = { alias_name[trigger] = alias_match_left[trigger] }
alias[trigger:FROM] = { alias_name[trigger] = alias_match_left[trigger] }
alias[trigger:FROMFROM] = { alias_name[trigger] = alias_match_left[trigger] }
alias[trigger:FROMFROMFROM] = { alias_name[trigger] = alias_match_left[trigger] }
alias[trigger:FROMFROMFROMFROM] = { alias_name[trigger] = alias_match_left[trigger] }

alias[trigger:species] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:planet] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:owner] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:controller] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:ruler] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:capital_scope] = {
    alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:orbit] = {
    alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:orbital_deposit_tile] = {
    alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:solar_system] = {
    alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:space_owner] = {
    alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:pop_faction] = {
    alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:home_planet] = {
    alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:overlord] = {
    alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:leader] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:starbase] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_playable_country] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_owned_fleet] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_orbital_station] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_planet_within_border] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_owned_ship] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_ship] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_moon] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:observation_outpost_owner] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:observation_outpost] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_war] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_defender] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_attacker] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_planet] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_owned_planet] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_controlled_planet] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_country] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_pop] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_research_station] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_mining_station] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_neighboring_tile] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_tile] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_rim_system] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_ship_in_system] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_owned_leader] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_owned_pop] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_sector] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_ambient_object] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_system_ambient_object] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_bordering_country] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_member] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_neighbor_system] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_subject] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_relation] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_owned_army] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_planet_army] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_neighbor_country] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_combatant_fleet] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_pool_leader] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_megastructure] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_owned_megastructure] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_system_megastructure] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_owned_pop_species] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_owned_starbase] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_system] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_system_within_border] = {
	alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:any_war_participant] = {
	alias_name[trigger] = alias_match_left[trigger]
}



#Count triggers: Should all check for < > on the ints
alias[trigger:count_pop_factions] = {
	count = int
	## cardinality = 0..1
	limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
}

alias[trigger:count_species] = {
	count = int
	## cardinality = 0..1
	limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
}

alias[trigger:count_exact_species] = {
	count = int
	## cardinality = 0..1
	limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
}

alias[trigger:count_fleet_ships] = {
	count = int
	## cardinality = 0..1
	limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
}

alias[trigger:count_system_ships] = {
	count = int
	## cardinality = 0..1
	limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
}

alias[trigger:count_armies] = {
	count = int
	## cardinality = 0..1
	limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
}

alias[trigger:count_ships] = {
	count = int
	## cardinality = 0..1
	limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
}

alias[trigger:count_owned_ships] = {
	count = int
	## cardinality = 0..1
	limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
}

alias[trigger:count_owned_pops] = {
	count = int
	## cardinality = 0..1
	limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
}

alias[trigger:count_pops] = {
	count = int
	## cardinality = 0..1
	limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
}

alias[trigger:count_diplo_ties] = {
	count = int
	## cardinality = 0..1
	limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
}



#count_starbase_modules - Checks the number of starbase modules that are of the specified type
#count_starbase_modules = { type = anchorage count < 12 }
#Supported Scopes: starbase
#Supported Targets: none


#these need an "or" function

#count_pool_leader - Iterate through each leader that is recruitable for the country
#count_pool_leader = { <count=<num/all>> <triggers> }
#Supported Scopes: country
#Supported Targets: none

#count_system_megastructure - Iterate through each megastructure in system
#count_system_megastructure = { <count=<num/all>> <triggers> }
#Supported Scopes: all
#Supported Targets: none

#count_owned_pop - Iterate through all owned pops
#count_owned_pop = { <count=<num/all>> <triggers> }
#Supported Scopes: planet country pop_faction
#Supported Targets: none

#count_owned_pop_species - Iterate through each species of a country's owned pops
#count_owned_pop_species = { <count=<num/all>> <triggers> }
#Supported Scopes: country
#Supported Targets: none

#count_owned_starbase - Iterate through every owned starbase
#count_owned_starbase = { <count=<num/all>> <triggers> }
#Supported Scopes: country
#Supported Targets: none

#count_system - Iterate through all systems
#count_system = { <count=<num/all>> <triggers> }
#Supported Scopes: all
#Supported Targets: none

#count_rim_system - Iterate through all rim systems
#count_rim_system = { <count=<num/all>> <triggers> }
#Supported Scopes: all
#Supported Targets: none

#count_system_within_border - Iterate through all systems within the country's borders
#count_system_within_border = { <count=<num/all>> <triggers> }
#Supported Scopes: country
#Supported Targets: none

#count_owned_army - Iterate through each army that is owned by the country
#count_owned_army = { <count=<num/all>> <triggers> }
#Supported Scopes: country
#Supported Targets: none

#count_war_participant - Iterate through all war participants
#count_war_participant = { <count=<num/all>> <triggers> }
#Supported Scopes: war
#Supported Targets: none

#count_planet_army - Iterate through each defending army on a planet
#count_planet_army = { <count=<num/all>> <triggers> }
#Supported Scopes: planet
#Supported Targets: none

#count_country - Iterate through all countries
#count_country = { <count=<num/all>> <triggers> }
#Supported Scopes: all
#Supported Targets: none

#count_relation - Iterate through all relations
#count_relation = { <count=<num/all>> <triggers> }
#Supported Scopes: country
#Supported Targets: none

#count_neighbor_country - Iterate through all neighbor countries
#count_neighbor_country = { <count=<num/all>> <triggers> }
#Supported Scopes: country
#Supported Targets: none

#count_bordering_country - Iterate through all bordering countries of a system
#count_bordering_country = { <count=<num/all>> <triggers> }
#Supported Scopes: galactic_object
#Supported Targets: none

#count_combatant_fleet - Iterate through each fleet this fleet is in combat with
#count_combatant_fleet = { <count=<num/all>> <triggers> }
#Supported Scopes: fleet
#Supported Targets: none

#count_megastructure - Iterate through each megastructure
#count_megastructure = { <count=<num/all>> <triggers> }
#Supported Scopes: all
#Supported Targets: none

#count_owned_megastructure - Iterate through each owned megastructure
#count_owned_megastructure = { <count=<num/all>> <triggers> }
#Supported Scopes: country
#Supported Targets: none


alias[trigger:count_tile] = {
	limit = { alias_name[trigger] = alias_match_left[trigger] }
	count = int
}
alias[trigger:count_tile] = {
	limit = { alias_name[trigger] = alias_match_left[trigger] }
	count = all
}

#count_war_participants - Checks the number of participants in the war on a specific side that meet the specified criteria
#count_war_participants = { limit = { <triggers> } side = target count < 4
#Supported Scopes: war
#Supported Targets: none


#attacker, defender and side should be country scope, side should be one of the previous two
#< >
###Checks the amount of potential war participants in a specific war that meet the specified criteria
alias[trigger:count_potential_war_participants] = {
	attacker = scalar
	defender = scalar
	side = scalar
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	count = int
}


alias[trigger:has_faction] = <pop_faction>
alias[trigger:is_pop_faction_type] = <pop_faction>


alias[trigger:closest_system] = {
	##cardinality = 0..1
	min_steps = int
	##cardinality = 0..1
	max_steps = int
    alias_name[trigger] = alias_match_left[trigger]
}


#Relative Power - lacks who = scope and checking the >, < etc
alias[trigger:relative_power] = {
	who = scalar
	## cardinality = 0..1
	category = enum[relative_power_categories]
	value = enum[relative_power_values]
}
	
enums = {
    enum[relative_power_categories] = {
        all
		fleet
		naval_capacity
		technology
    }
    enum[relative_power_values] = {
        pathetic
		inferior
		equivalent
		superior
		overwhelming
    }
    enum[research_areas] = {
        physics
		engineering
		society
    }
	enum[genders] = {
		female
		male
		indeterminable
	}
	enum[hyperlane_euclidean] = {
		hyperlane
		euclidean
	}
	enum[election_types] = {
		none
		democratic
		oligarchic
	}
}

alias[trigger:has_election_type] = enum[election_types]


alias[trigger:has_modifier] = <static_modifier>

#Missing who = scope
alias[trigger:has_opinion_modifier] = {
	who = scalar
	modifier = <opinion_modifier>
}

#flags
alias[trigger:has_country_flag] = scalar
alias[trigger:has_planet_flag] = scalar
alias[trigger:has_pop_facton_flag] = scalar
alias[trigger:has_star_flag] = scalar
alias[trigger:has_species_flag] = scalar
alias[trigger:has_pop_flag] = scalar
alias[trigger:has_fleet_flag] = scalar
alias[trigger:has_ship_flag] = scalar
alias[trigger:has_global_flag] = scalar
alias[trigger:has_leader_flag] = scalar
alias[trigger:has_ambient_object_flag] = scalar
alias[trigger:has_megastructure_flag] = scalar


#missing who = scope
alias[trigger:has_relation_flag] = {
    who = scalar
    flag = scalar
	## cardinality = 0..1
	is_reverse = bool
}

#missing who = scope
alias[trigger:reverse_has_relation_flag] = {
    who = scalar
    flag = scalar
}

alias[trigger:has_government] = <government>
alias[trigger:has_authority] = <authority>
alias[trigger:has_valid_civic] = <civic>
alias[trigger:has_civic] = <civic>
alias[trigger:has_invalid_civic] = <civic>


alias[trigger:leader_of_faction] = <pop_faction>

#should be scope
alias[trigger:is_same_value] = scalar


#should check for <> too
alias[trigger:pop_percentage] = {
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	percentage = float[0.0..1.0]
}

#should check for <> too
alias[trigger:support] = float[0.0..1.0]
alias[trigger:used_naval_capacity_percent] = float
alias[trigger:num_moons] = int
alias[trigger:num_adjacent_tiles] = int

alias[trigger:is_country_type] = <country_type>
alias[trigger:has_ethic] = <ethos>
alias[trigger:pop_has_ethic] = <ethos>


#these should all be scope
#country only
alias[trigger:is_angry_to] = scalar
alias[trigger:is_patronizing_to] = scalar
alias[trigger:is_dismissive_to] = scalar
alias[trigger:is_threatened_to] = scalar
alias[trigger:is_protective_to] = scalar
alias[trigger:is_neutral_to] = scalar
alias[trigger:is_friendly_to] = scalar
alias[trigger:is_loyal_to] = scalar
alias[trigger:is_cordial_to] = scalar
alias[trigger:is_belligerent_to] = scalar
alias[trigger:is_imperious_to] = scalar
alias[trigger:is_arrogant_to] = scalar
alias[trigger:is_enigmatic_to] = scalar
alias[trigger:is_berserker_to] = scalar
alias[trigger:is_hostile_to] = scalar
alias[trigger:is_domineering_to] = scalar
alias[trigger:is_unfriendly_to] = scalar
alias[trigger:is_disloyal_to] = scalar
alias[trigger:is_custodial_to] = scalar
alias[trigger:is_rival] = scalar
alias[trigger:is_in_federation_with] = scalar
alias[trigger:has_defensive_pact] = scalar
alias[trigger:has_research_agreement] = scalar
alias[trigger:has_communications] = scalar
alias[trigger:is_guaranteeing] = scalar
alias[trigger:has_truce] = scalar
alias[trigger:is_at_war_with] = scalar
alias[trigger:is_within_borders_of] = scalar
alias[trigger:has_non_aggression_pact] = scalar
alias[trigger:is_controlled_by] = scalar
alias[trigger:is_neighbor_of] = scalar
alias[trigger:is_original_owner] = scalar
alias[trigger:is_same_empire] = scalar
alias[trigger:has_migration_access] = scalar
alias[trigger:has_closed_borders] = scope[any]	#country
#to country/species/pop
alias[trigger:is_same_species] = scalar
alias[trigger:is_subspecies] = scalar
#any scope
alias[trigger:exists] = scope[any]

#various scopes (one for each of them, obviously)
###Checks if the planet is the same as target planet
alias[trigger:is_planet] = scope[any]
###Checks if the pop is the same as target pop
alias[trigger:is_pop] = scope[any]
###Checks if the ship is the same as target ship
alias[trigger:is_ship] = scope[any]
###Checks if the army is the same as target army
alias[trigger:is_army] = scope[any]
###Checks if the country is the same as target country
alias[trigger:is_country] = scope[any]



#this who should be a scope, but I think rather pop/species
#should also check < >
alias[trigger:habitability] = {
	who = scalar
	value = float[0.0..1.0]
}

#should also check < >
alias[trigger:free_leader_slots] = int
alias[trigger:has_hp] = int
alias[trigger:has_hp_percentage] = float[0.0..1.0]

#should also check < > and <=
alias[trigger:end_game_years_passed] = int
alias[trigger:mid_game_years_passed] = int

alias[trigger:has_federation] = bool
alias[trigger:is_at_war] = bool
alias[trigger:is_ai] = bool
alias[trigger:is_being_purged] = bool
alias[trigger:is_enslaved] = bool
alias[trigger:has_orbital_bombardment] = bool
alias[trigger:has_owner] = bool
alias[trigger:has_ground_combat] = bool
alias[trigger:always] = bool
alias[trigger:is_subject] = bool
alias[trigger:is_under_colonization] = bool
alias[trigger:recently_lost_war] = bool
alias[trigger:is_colony] = bool
alias[trigger:is_in_combat] = bool
alias[trigger:is_star] = bool
alias[trigger:is_asteroid] = bool
alias[trigger:has_any_strategic_resource] = bool
alias[trigger:is_war_leader] = bool


alias[trigger:is_planet_class] = <planet_class>
alias[trigger:is_star_class] = <star_class>


#ideally would check scopes and then planet/country edict
alias[trigger:has_edict] = <edict>


#Hopefully this can be done a lot better. "who" must be country, "side" must be country or attacker(s?) or defender(s?)
alias[trigger:is_war_participant] = {
	who = scalar
	side = scalar
}

#also needs scope check
alias[trigger:opinion] = {
	who = scalar
	value = int
}

#should check <>
alias[trigger:happiness] = float
alias[trigger:energy] = int
alias[trigger:vassals] = int
alias[trigger:food] = int
alias[trigger:minerals] = int
###Checks the number of regular empires in the galaxy
alias[trigger:num_empires] = int
###Checks the number of members in the alliance
alias[trigger:members] = int
###Checks the country's number of established communications
alias[trigger:num_communications] = int
alias[trigger:num_ascension_perks] = int
alias[trigger:num_ascension_perk_slots] = int
alias[trigger:num_owned_active_gateways] = int
alias[trigger:num_active_gateways] = int
alias[trigger:num_trait_points] = int
alias[trigger:has_skill] = int
###Checks the war exhaustion of the war's attackers
alias[trigger:attacker_exhaustion_score] = int
###Checks the war exhaustion of the war's defenders
alias[trigger:defender_war_exhaustion] = int
###Checks the country's total war exhaustion for all offensive wars
alias[trigger:off_war_exhaustion_sum] = int
###Checks the country's total war exhaustion for all defemsove wars
alias[trigger:def_war_exhaustion_sum] = int



alias[trigger:has_ring] = bool
alias[trigger:is_moon] = bool
alias[trigger:pops_have_happiness] = bool
alias[trigger:is_pirate] = bool
###Checks if the scoped ship design, ship or fleet (all ships) has a designable ship size.
alias[trigger:is_designable] = bool
alias[trigger:is_orbital_tile] = bool
 

alias[trigger:leader_class] = enum[leader_classes]
alias[trigger:pre_ruler_leader_class] = enum[leader_classes_no_ruler]

alias[trigger:has_mission] = <observation_station_mission>

#these should check < and > too
alias[trigger:years_passed] = int
alias[trigger:num_owned_planets] = int
alias[trigger:unrest] = int[0..100]
alias[trigger:influence] = int
alias[trigger:num_pops] = int
alias[trigger:planet_size] = int
###Checks the number of fallen empires in the galaxy
alias[trigger:num_fallen_empires] = int
alias[trigger:colony_age] = int
alias[trigger:num_ethics] = int


alias[trigger:is_ship_size] = <ship_size>

alias[trigger:is_ship_class] = enum[shipsize_class]

alias[trigger:is_researching_area] = enum[research_areas]
#should have < >
alias[trigger:count_tech_options] = {
	area = enum[research_areas]
	count = int
}
alias[trigger:research_leader] = {
	area = enum[research_areas]
	## cardinality = 1..100
	alias_name[trigger] = alias_match_left[trigger]
}


###Checks the average ethics divergence on the planet. Not used in Vanilla, testing advised. Please inform Dayshine and Caligula on the results of the tests!
alias[trigger:ethos] = float[0.0..1.0]

alias[trigger:gender] = enum[genders]



alias[trigger:is_sapient] = bool
alias[trigger:is_preventing_anomaly] = bool
alias[trigger:has_observation_outpost] = bool
alias[trigger:starting_system] = bool
###Checks if the planet is still owned by its first colonizer
alias[trigger:original_owner] = bool
###Checks if the pop is a robot
alias[trigger:is_robot_pop] = bool
###Checks if the tile has any resource
alias[trigger:has_any_resource] = bool
###Checks if the tile has any empire-unique building
alias[trigger:has_empire_unique_building] = bool
###Checks if the scoped fleet is an alliance fleet.
alias[trigger:is_alliance_fleet] = bool
alias[trigger:is_capital] = bool
alias[trigger:has_blocker] = bool
alias[trigger:has_pop] = bool


#who should refer to a country on these two
###Checks if the planet can be colonized by target country
alias[trigger:can_colonize] = {
	who = scalar
	status = bool
}
###Checks the relative amount of already-researched tech between the country and target country
alias[trigger:tech_unlocked_ratio] = {
	who = scalar
	ratio = float[0.0...1.0]
}

alias[trigger:has_ascension_perk] = <ascension_perk>

alias[trigger:ascension_perk] = <ascension_perk>

alias[trigger:has_technology] = <technology>


alias[trigger:check_variable] = {
	which = scalar
	value = float
}


#Corrections needed:
#	source = scope (possibly any?)
#	min/max_distance now (very nearly exclusively) use <= for max and >= for min. Presumably there was a reason for the change and this should be enforced
#	min should not be higher than max
#	bypass_empire = country + only if not uses_bypass = no
#	min/max_jumps cannot have type = euclidean
###Checks the ship/fleet/planet/leader/pop/system's galaxy map distance to target in absolute units
alias[trigger:distance] = {
	source = scalar
	## cardinality = 0..1
	min_distance = int
	## cardinality = 0..1
	max_distance = int
	## cardinality = 0..1
	###Euclidean means the shortest distance from A to B, "as the crow flies" (hyperlane by default)
	type = enum[hyperlane_euclidean]
	## cardinality = 0..1
	###Whether to use bypasses (wormholes/gateways) when evaluating distance (yes by default)
	use_bypasses = bool
	## cardinality = 0..1
	###Determines what bypass can be used. This parameter is ignored if uses_bypass=false. If unset, bypasses will be ignored. Note: This needs testing, report results to Dayshine and Caligula.
	bypass_empire = scalar
	## cardinality = 0..1
	min_jumps = int
	## cardinality = 0..1
	max_jumps = int
}


#could be refined to check leader or species traits depending on scope
alias[trigger:has_trait] = <trait>
#these two should be amended to <trait.species_trait> and <trait.ruler_trait>
alias[trigger:pop_has_trait] = <trait>
alias[trigger:has_ruler_trait] = <trait>



#these should all be country = country
###Checks if a species/pop/leader has a particular citizenship type in their country
alias[trigger:has_citizenship_type] = {
	## cardinality = 0..1
	country = scalar
	type = enum[citizenship_types]
}
###Checks if a species/pop/leader has a particular military service type in their country
alias[trigger:has_military_service_type] = {
	## cardinality = 0..1
	country = scalar
	type = enum[military_service_types]
}
###Checks if a species/pop/leader has a particular purge type in their country
alias[trigger:has_purge_type] = {
	## cardinality = 0..1
	country = scalar
	type = enum[purge_types]
}
###Checks if a species/pop/leader has a particular slavery type in their country
alias[trigger:has_slavery_type] = {
	## cardinality = 0..1
	country = scalar
	type = enum[slavery_types]
}
###Checks if the pop is prevented from reproducing
alias[trigger:has_population_control] = {
	## cardinality = 0..1
	country = scalar
	type = enum[population_controls]
}
###Checks if the pop is prevented from migrating
alias[trigger:has_migration_control] = {
	## cardinality = 0..1
	country = scalar
	type = enum[migration_controls]
}
###Checks if a species/pop/leader has a particular living standard in their country
alias[trigger:has_living_standard] = {
	## cardinality = 0..1
	country = scalar
	type = enum[living_standards]
}


#all three texts should be localisation
alias[trigger:custom_tooltip] = {
	## cardinality = 0..1
	text = scalar
	## cardinality = 0..1
	fail_text = scalar
	## cardinality = 0..1
	success_text = scalar
	alias_name[trigger] = alias_match_left[trigger]
}

#< >
alias[trigger:years_of_peace] = {
	## cardinality = 0..1
	delay = int
	value = int
}
alias[trigger:fleet_size] = int

alias[trigger:is_difficulty] = int[0..2]

alias[trigger:is_ruined] = bool

alias[trigger:has_building] = bool
alias[trigger:has_building] = <building>

alias[trigger:has_ai_personality] = <ai_personality>
alias[trigger:has_ai_personality_behaviour] = enum[ai_personality_behaviours]


#check < >
alias[trigger:has_country_resource] = {
	type = <resource>
	amount = int
}
alias[trigger:has_monthly_income] = {
	resource = <resource>
	value = int
}

#should be country scope
alias[trigger:can_be_subject] = {
	overlord = scalar
	subject_type = <subject_type>
}

alias[trigger:is_subject_type] = <subject_type>

#should be scope = country or system
###Checks if the country has claims on the given country or system.
alias[trigger:has_claim] = scalar


alias[trigger:local_has_dlc] = enum[DLCs]
alias[trigger:host_has_dlc] = enum[DLCs]


###This doesn't work as of 1.8, maybe it is fixed in the meantime, tell Caligula if yes!
alias[trigger:member_of_faction] = bool
###This doesn't work as of 1.8, maybe it is fixed in the meantime, tell Caligula if yes!
alias[trigger:member_of_faction] = <pop_faction>


#scripted triggers
alias[trigger:<scripted_trigger>] = bool


							